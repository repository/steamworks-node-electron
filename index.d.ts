
import SteamEnums from './steamApiEnums';
import SteamStructs from './steamApiStructs';

export = SteamWorks;
declare class SteamWorks {
  constructor(appId: number);
  Init: {(appId: number): boolean};
  Shutdown: {(): boolean};
  GetApplicationRunning: {(): boolean};
  GetCallbackThreadRunning: {(): boolean};
  SteamAPI: SteamAPI;
  Constants: Constants;
  Structs: Structs;
  Enums: Enums;
  Uncategorized: Uncategorized;
  SteamClient: SteamClient;
  SteamUser: SteamUser;
  SteamFriends: SteamFriends;
  SteamUtils: SteamUtils;
  SteamMatchmaking: SteamMatchmaking;
  SteamMatchmakingServers: SteamMatchmakingServers;
  SteamGameSearch: SteamGameSearch;
  SteamParties: SteamParties;
  SteamUserStats: SteamUserStats;
  SteamApps: SteamApps;
  SteamNetworking: SteamNetworking;
  SteamRemoteStorage: SteamRemoteStorage;
  SteamScreenshots: SteamScreenshots;
  SteamMusic: SteamMusic;
  SteamMusicRemote: SteamMusicRemote;
  SteamHTTP: SteamHTTP;
  SteamController: SteamController;
  SteamUGC: SteamUGC;
  SteamAppList: SteamAppList;
  SteamHTMLSurface: SteamHTMLSurface;
  SteamInventory: SteamInventory;
  SteamVideo: SteamVideo;
  SteamParentalSettings: SteamParentalSettings;
  SteamInput: SteamInput;
  SteamRemotePlay: SteamRemotePlay;
}


declare interface SteamAPI {
  RunCallbacks: {(/* Args Unknown */): unknown};
  GetHSteamPipe: {(/* Args Unknown */): unknown};
  GetHSteamUser: {(/* Args Unknown */): unknown};
  RegisterCallback: {(/* Args Unknown */): unknown};
  UnregisterCallback: {(/* Args Unknown */): unknown};
  RegisterCallResult: {(/* Args Unknown */): unknown};
  UnregisterCallResult: {(/* Args Unknown */): unknown};
  Init: {(/* Args Unknown */): unknown};
  Shutdown: {(/* Args Unknown */): unknown};
  RestartAppIfNecessary: {(/* Args Unknown */): unknown};
  ReleaseCurrentThreadMemory: {(/* Args Unknown */): unknown};
  WriteMiniDump: {(/* Args Unknown */): unknown};
  SetMiniDumpComment: {(/* Args Unknown */): unknown};
  IsSteamRunning: {(/* Args Unknown */): unknown};
  GetSteamInstallPath: {(/* Args Unknown */): unknown};
  SetTryCatchCallbacks: {(/* Args Unknown */): unknown};
  ManualDispatch_Init: {(/* Args Unknown */): unknown};
  ManualDispatch_RunFrame: {(/* Args Unknown */): unknown};
  ManualDispatch_GetNextCallback: {(/* Args Unknown */): unknown};
  ManualDispatch_FreeLastCallback: {(/* Args Unknown */): unknown};
  ManualDispatch_GetAPICallResult: {(/* Args Unknown */): unknown};
}
declare interface Constants {
  k_uAppIdInvalid: number;
  k_uDepotIdInvalid: number;
  k_uAPICallInvalid: number;
  k_ulPartyBeaconIdInvalid: number;
  k_EDenyInvalid: number;
  k_EDenyInvalidVersion: number;
  k_EDenyGeneric: number;
  k_EDenyNotLoggedOn: number;
  k_EDenyNoLicense: number;
  k_EDenyCheater: number;
  k_EDenyLoggedInElseWhere: number;
  k_EDenyUnknownText: number;
  k_EDenyIncompatibleAnticheat: number;
  k_EDenyMemoryCorruption: number;
  k_EDenyIncompatibleSoftware: number;
  k_EDenySteamConnectionLost: number;
  k_EDenySteamConnectionError: number;
  k_EDenySteamResponseTimedOut: number;
  k_EDenySteamValidationStalled: number;
  k_EDenySteamOwnerLeftGuestUser: number;
  k_HAuthTicketInvalid: number;
  k_EUserHasLicenseResultHasLicense: number;
  k_EUserHasLicenseResultDoesNotHaveLicense: number;
  k_EUserHasLicenseResultNoAuth: number;
  k_unSteamAccountIDMask: number;
  k_unSteamAccountInstanceMask: number;
  k_EChatAccountInstanceMask: number;
  k_EChatInstanceFlagClan: number;
  k_EChatInstanceFlagLobby: number;
  k_EChatInstanceFlagMMSLobby: number;
  k_EPositionTopLeft: number;
  k_EPositionTopRight: number;
  k_EPositionBottomLeft: number;
  k_EPositionBottomRight: number;
  k_cchGameExtraInfoMax: number;
  k_EPlayerResultFailedToConnect: number;
  k_EPlayerResultAbandoned: number;
  k_EPlayerResultKicked: number;
  k_EPlayerResultIncomplete: number;
  k_EPlayerResultCompleted: number;
  k_iSteamBillingCallbacks: number;
  k_iSteamContentServerCallbacks: number;
  k_iSteamNetworkingCallbacks: number;
  k_iSteamNetworkingSocketsCallbacks: number;
  k_iSteamNetworkingMessagesCallbacks: number;
  k_iSteamNetworkingUtilsCallbacks: number;
  k_iSteamGameCoordinatorCallbacks: number;
  k_iSteam2AsyncCallbacks: number;
  k_iSteamGameStatsCallbacks: number;
  k_iSteamHTTPCallbacks: number;
  k_iSteamScreenshotsCallbacks: number;
  k_iSteamStreamLauncherCallbacks: number;
  k_iSteamControllerCallbacks: number;
  k_iSteamStreamClientCallbacks: number;
  k_iSteamAppListCallbacks: number;
  k_iSteamMusicCallbacks: number;
  k_iSteamMusicRemoteCallbacks: number;
  k_iSteamGameNotificationCallbacks: number;
  k_ISteamParentalSettingsCallbacks: number;
  k_iSteamGameSearchCallbacks: number;
  k_iSteamSTARCallbacks: number;
  k_iSteamRemotePlayCallbacks: number;
  k_iSteamChatCallbacks: number;
  STEAMCLIENT_INTERFACE_VERSION: string;
  STEAMUSER_INTERFACE_VERSION: string;
  k_cchMaxFriendsGroupName: number;
  k_cFriendsGroupLimit: number;
  k_FriendsGroupID_Invalid: number;
  k_cEnumerateFollowersMax: number;
  k_EFriendFlagNone: number;
  k_EFriendFlagBlocked: number;
  k_EFriendFlagFriendshipRequested: number;
  k_EFriendFlagImmediate: number;
  k_EFriendFlagClanMember: number;
  k_EFriendFlagOnGameServer: number;
  k_EFriendFlagRequestingFriendship: number;
  k_EFriendFlagRequestingInfo: number;
  k_EFriendFlagIgnored: number;
  k_EFriendFlagIgnoredFriend: number;
  k_EFriendFlagChatMember: number;
  k_EFriendFlagAll: number;
  k_cchPersonaNameMax: number;
  k_cwchPersonaNameMax: number;
  k_nUserRestrictionNone: number;
  k_nUserRestrictionUnknown: number;
  k_nUserRestrictionAnyChat: number;
  k_nUserRestrictionVoiceChat: number;
  k_nUserRestrictionGroupChat: number;
  k_nUserRestrictionRating: number;
  k_nUserRestrictionGameInvites: number;
  k_nUserRestrictionTrading: number;
  k_cubChatMetadataMax: number;
  k_cchMaxRichPresenceKeys: number;
  k_cchMaxRichPresenceKeyLength: number;
  k_cchMaxRichPresenceValueLength: number;
  STEAMFRIENDS_INTERFACE_VERSION: string;
  STEAMUTILS_INTERFACE_VERSION: string;
  k_nMaxLobbyKeyLength: number;
  STEAMMATCHMAKING_INTERFACE_VERSION: string;
  HSERVERQUERY_INVALID: number;
  STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION: string;
  k_unFavoriteFlagNone: number;
  k_unFavoriteFlagFavorite: number;
  k_unFavoriteFlagHistory: number;
  STEAMGAMESEARCH_INTERFACE_VERSION: string;
  STEAMPARTIES_INTERFACE_VERSION: string;
  k_cchStatNameMax: number;
  k_cchLeaderboardNameMax: number;
  k_cLeaderboardDetailsMax: number;
  STEAMUSERSTATS_INTERFACE_VERSION: string;
  k_cubAppProofOfPurchaseKeyMax: number;
  STEAMAPPS_INTERFACE_VERSION: string;
  k_ERegisterActivationCodeAlreadyOwned: number;
  STEAMNETWORKING_INTERFACE_VERSION: string;
  k_unMaxCloudFileChunkSize: number;
  k_PublishedFileIdInvalid: number;
  k_UGCHandleInvalid: number;
  k_PublishedFileUpdateHandleInvalid: number;
  k_UGCFileStreamHandleInvalid: number;
  k_cchPublishedDocumentTitleMax: number;
  k_cchPublishedDocumentDescriptionMax: number;
  k_cchPublishedDocumentChangeDescriptionMax: number;
  k_unEnumeratePublishedFilesMaxResults: number;
  k_cchTagListMax: number;
  k_cchFilenameMax: number;
  k_cchPublishedFileURLMax: number;
  STEAMREMOTESTORAGE_INTERFACE_VERSION: string;
  k_nScreenshotMaxTaggedUsers: number;
  k_nScreenshotMaxTaggedPublishedFiles: number;
  k_cubUFSTagTypeMax: number;
  k_cubUFSTagValueMax: number;
  k_ScreenshotThumbWidth: number;
  INVALID_SCREENSHOT_HANDLE: number;
  STEAMSCREENSHOTS_INTERFACE_VERSION: string;
  STEAMMUSIC_INTERFACE_VERSION: string;
  k_SteamMusicNameMaxLength: number;
  k_SteamMusicPNGMaxLength: number;
  STEAMMUSICREMOTE_INTERFACE_VERSION: string;
  INVALID_HTTPREQUEST_HANDLE: number;
  INVALID_HTTPCOOKIE_HANDLE: number;
  STEAMHTTP_INTERFACE_VERSION: string;
  STEAM_CONTROLLER_MAX_COUNT: number;
  STEAM_CONTROLLER_MAX_ANALOG_ACTIONS: number;
  STEAM_CONTROLLER_MAX_DIGITAL_ACTIONS: number;
  STEAM_CONTROLLER_MAX_ORIGINS: number;
  STEAM_CONTROLLER_MAX_ACTIVE_LAYERS: number;
  STEAM_CONTROLLER_MIN_ANALOG_ACTION_DATA: number;
  STEAM_CONTROLLER_MAX_ANALOG_ACTION_DATA: number;
  STEAMCONTROLLER_INTERFACE_VERSION: string;
  k_UGCQueryHandleInvalid: number;
  k_UGCUpdateHandleInvalid: number;
  kNumUGCResultsPerPage: number;
  k_cchDeveloperMetadataMax: number;
  STEAMUGC_INTERFACE_VERSION: string;
  STEAMAPPLIST_INTERFACE_VERSION: string;
  INVALID_HTMLBROWSER: number;
  STEAMHTMLSURFACE_INTERFACE_VERSION: string;
  k_SteamItemInstanceIDInvalid: number;
  k_ESteamItemNoTrade: number;
  k_ESteamItemRemoved: number;
  k_ESteamItemConsumed: number;
  STEAMINVENTORY_INTERFACE_VERSION: string;
  STEAMVIDEO_INTERFACE_VERSION: string;
  k_EFeatureInvalid: number;
  k_EFeatureStore: number;
  k_EFeatureCommunity: number;
  k_EFeatureProfile: number;
  k_EFeatureFriends: number;
  k_EFeatureNews: number;
  k_EFeatureTrading: number;
  k_EFeatureSettings: number;
  k_EFeatureConsole: number;
  k_EFeatureBrowser: number;
  k_EFeatureParentalSetup: number;
  k_EFeatureLibrary: number;
  k_EFeatureTest: number;
  k_EFeatureSiteLicense: number;
  k_EFeatureMax: number;
  STEAMPARENTALSETTINGS_INTERFACE_VERSION: string;
  STEAM_INPUT_MAX_COUNT: number;
  STEAM_INPUT_MAX_ANALOG_ACTIONS: number;
  STEAM_INPUT_MAX_DIGITAL_ACTIONS: number;
  STEAM_INPUT_MAX_ORIGINS: number;
  STEAM_INPUT_MAX_ACTIVE_LAYERS: number;
  STEAM_INPUT_MIN_ANALOG_ACTION_DATA: number;
  STEAM_INPUT_MAX_ANALOG_ACTION_DATA: number;
  STEAMINPUT_INTERFACE_VERSION: string;
  STEAMREMOTEPLAY_INTERFACE_VERSION: string;
  STEAMNETWORKINGMESSAGES_INTERFACE_VERSION: string;
  STEAMNETWORKINGSOCKETS_INTERFACE_VERSION: string;
  STEAMNETWORKINGUTILS_INTERFACE_VERSION: string;
  STEAMGAMESERVER_INTERFACE_VERSION: string;
  STEAMGAMESERVERSTATS_INTERFACE_VERSION: string;
  STEAMAPPTICKET_INTERFACE_VERSION: string;
  STEAMGAMECOORDINATOR_INTERFACE_VERSION: string;
  STEAMMATCHMAKINGSERVERLISTRESPONSE_INTERFACE_VERSION: string;
  STEAMMATCHMAKINGPINGRESPONSE_INTERFACE_VERSION: string;
  STEAMMATCHMAKINGPLAYERSRESPONSE_INTERFACE_VERSION: string;
  STEAMMATCHMAKINGRULESRESPONSE_INTERFACE_VERSION: string;
  STEAMNETWORKINGCONNECTIONSIGNALING_INTERFACE_VERSION: string;
  STEAMNETWORKINGSIGNALINGRECVCONTEXT_INTERFACE_VERSION: string;
  STEAMNETWORKINGFAKEUDPPORT_INTERFACE_VERSION: string;
}
declare interface Structs {
  SteamIPAddress_t: SteamStructs.SteamIPAddress_t;
  FriendGameInfo_t: SteamStructs.FriendGameInfo_t;
  SteamPartyBeaconLocation_t: SteamStructs.SteamPartyBeaconLocation_t;
  LeaderboardEntry_t: SteamStructs.LeaderboardEntry_t;
  P2PSessionState_t: SteamStructs.P2PSessionState_t;
  SteamParamStringArray_t: SteamStructs.SteamParamStringArray_t;
  SteamUGCDetails_t: SteamStructs.SteamUGCDetails_t;
  SteamItemDetails_t: SteamStructs.SteamItemDetails_t;
  InputAnalogActionData_t: SteamStructs.InputAnalogActionData_t;
  InputDigitalActionData_t: SteamStructs.InputDigitalActionData_t;
  InputMotionData_t: SteamStructs.InputMotionData_t;
  SteamInputActionEvent_t: SteamStructs.SteamInputActionEvent_t;
  SteamNetworkingIdentityRender: {(/* Args Unknown */): unknown};
  SteamNetworkingIPAddrRender: {(/* Args Unknown */): unknown};
}
declare interface Enums {
  ESteamIPType: SteamEnums.ESteamIPType;
  EResult: SteamEnums.EResult;
  EVoiceResult: SteamEnums.EVoiceResult;
  EBeginAuthSessionResult: SteamEnums.EBeginAuthSessionResult;
  EAuthSessionResponse: SteamEnums.EAuthSessionResponse;
  EAccountType: SteamEnums.EAccountType;
  EChatEntryType: SteamEnums.EChatEntryType;
  EChatRoomEnterResponse: SteamEnums.EChatRoomEnterResponse;
  EBroadcastUploadResult: SteamEnums.EBroadcastUploadResult;
  EMarketNotAllowedReasonFlags: SteamEnums.EMarketNotAllowedReasonFlags;
  EDurationControlProgress: SteamEnums.EDurationControlProgress;
  EDurationControlNotification: SteamEnums.EDurationControlNotification;
  EDurationControlOnlineState: SteamEnums.EDurationControlOnlineState;
  EGameSearchErrorCode_t: SteamEnums.EGameSearchErrorCode_t;
  ESteamIPv6ConnectivityProtocol: SteamEnums.ESteamIPv6ConnectivityProtocol;
  ESteamIPv6ConnectivityState: SteamEnums.ESteamIPv6ConnectivityState;
  EFriendRelationship: SteamEnums.EFriendRelationship;
  EPersonaState: SteamEnums.EPersonaState;
  EOverlayToStoreFlag: SteamEnums.EOverlayToStoreFlag;
  EActivateGameOverlayToWebPageMode: SteamEnums.EActivateGameOverlayToWebPageMode;
  EPersonaChange: SteamEnums.EPersonaChange;
  ESteamAPICallFailure: SteamEnums.ESteamAPICallFailure;
  EGamepadTextInputMode: SteamEnums.EGamepadTextInputMode;
  EGamepadTextInputLineMode: SteamEnums.EGamepadTextInputLineMode;
  EFloatingGamepadTextInputMode: SteamEnums.EFloatingGamepadTextInputMode;
  ETextFilteringContext: SteamEnums.ETextFilteringContext;
  ECheckFileSignature: SteamEnums.ECheckFileSignature;
  ELobbyType: SteamEnums.ELobbyType;
  ELobbyComparison: SteamEnums.ELobbyComparison;
  ELobbyDistanceFilter: SteamEnums.ELobbyDistanceFilter;
  EChatMemberStateChange: SteamEnums.EChatMemberStateChange;
  ESteamPartyBeaconLocationType: SteamEnums.ESteamPartyBeaconLocationType;
  ESteamPartyBeaconLocationData: SteamEnums.ESteamPartyBeaconLocationData;
  ELeaderboardDataRequest: SteamEnums.ELeaderboardDataRequest;
  ELeaderboardSortMethod: SteamEnums.ELeaderboardSortMethod;
  ELeaderboardDisplayType: SteamEnums.ELeaderboardDisplayType;
  ELeaderboardUploadScoreMethod: SteamEnums.ELeaderboardUploadScoreMethod;
  ERegisterActivationCodeResult: SteamEnums.ERegisterActivationCodeResult;
  EP2PSessionError: SteamEnums.EP2PSessionError;
  EP2PSend: SteamEnums.EP2PSend;
  ESNetSocketState: SteamEnums.ESNetSocketState;
  ESNetSocketConnectionType: SteamEnums.ESNetSocketConnectionType;
  ERemoteStoragePlatform: SteamEnums.ERemoteStoragePlatform;
  ERemoteStoragePublishedFileVisibility: SteamEnums.ERemoteStoragePublishedFileVisibility;
  EWorkshopFileType: SteamEnums.EWorkshopFileType;
  EWorkshopVote: SteamEnums.EWorkshopVote;
  EWorkshopFileAction: SteamEnums.EWorkshopFileAction;
  EWorkshopEnumerationType: SteamEnums.EWorkshopEnumerationType;
  EWorkshopVideoProvider: SteamEnums.EWorkshopVideoProvider;
  EUGCReadAction: SteamEnums.EUGCReadAction;
  ERemoteStorageLocalFileChange: SteamEnums.ERemoteStorageLocalFileChange;
  ERemoteStorageFilePathType: SteamEnums.ERemoteStorageFilePathType;
  EVRScreenshotType: SteamEnums.EVRScreenshotType;
  ESteamControllerPad: SteamEnums.ESteamControllerPad;
  EControllerActionOrigin: SteamEnums.EControllerActionOrigin;
  EXboxOrigin: SteamEnums.EXboxOrigin;
  ESteamInputType: SteamEnums.ESteamInputType;
  ESteamControllerLEDFlag: SteamEnums.ESteamControllerLEDFlag;
  EUGCMatchingUGCType: SteamEnums.EUGCMatchingUGCType;
  EUserUGCList: SteamEnums.EUserUGCList;
  EUGCQuery: SteamEnums.EUGCQuery;
  EItemUpdateStatus: SteamEnums.EItemUpdateStatus;
  EItemState: SteamEnums.EItemState;
  EItemStatistic: SteamEnums.EItemStatistic;
  EItemPreviewType: SteamEnums.EItemPreviewType;
  EInputSourceMode: SteamEnums.EInputSourceMode;
  EInputActionOrigin: SteamEnums.EInputActionOrigin;
  EControllerHapticLocation: SteamEnums.EControllerHapticLocation;
  EControllerHapticType: SteamEnums.EControllerHapticType;
  ESteamInputConfigurationEnableType: SteamEnums.ESteamInputConfigurationEnableType;
  ESteamInputLEDFlag: SteamEnums.ESteamInputLEDFlag;
  ESteamInputGlyphSize: SteamEnums.ESteamInputGlyphSize;
  ESteamInputGlyphStyle: SteamEnums.ESteamInputGlyphStyle;
  ESteamInputActionEventType: SteamEnums.ESteamInputActionEventType;
  ESteamDeviceFormFactor: SteamEnums.ESteamDeviceFormFactor;
}
declare interface Uncategorized {
  AudioPlayback_Undefined: number;
  AudioPlayback_Playing: number;
  AudioPlayback_Paused: number;
  AudioPlayback_Idle: number;
  SteamAppTicket: {(/* Args Unknown */): unknown};
  SteamGameCoordinator: {(/* Args Unknown */): unknown};
  SteamNetworkingConnectionSignaling: {(/* Args Unknown */): unknown};
  SteamNetworkingSignalingRecvContext: {(/* Args Unknown */): unknown};
  SteamNetworkingFakeUDPPort: {(/* Args Unknown */): unknown};
  CSteamID: {(/* Args Unknown */): unknown};
  CGameID: {(/* Args Unknown */): unknown};
  CCallbackBase: {(/* Args Unknown */): unknown};
  CSteamAPIContext: {(/* Args Unknown */): unknown};
}
declare interface SteamClient {
  CreateSteamPipe: {(/* Args Unknown */): unknown};
  BReleaseSteamPipe: {(/* Args Unknown */): unknown};
  ConnectToGlobalUser: {(/* Args Unknown */): unknown};
  CreateLocalUser: {(/* Args Unknown */): unknown};
  ReleaseUser: {(/* Args Unknown */): unknown};
  GetISteamUser: {(/* Args Unknown */): unknown};
  GetISteamGameServer: {(/* Args Unknown */): unknown};
  SetLocalIPBinding: {(/* Args Unknown */): unknown};
  GetISteamFriends: {(/* Args Unknown */): unknown};
  GetISteamUtils: {(/* Args Unknown */): unknown};
  GetISteamMatchmaking: {(/* Args Unknown */): unknown};
  GetISteamMatchmakingServers: {(/* Args Unknown */): unknown};
  GetISteamGenericInterface: {(/* Args Unknown */): unknown};
  GetISteamUserStats: {(/* Args Unknown */): unknown};
  GetISteamGameServerStats: {(/* Args Unknown */): unknown};
  GetISteamApps: {(/* Args Unknown */): unknown};
  GetISteamNetworking: {(/* Args Unknown */): unknown};
  GetISteamRemoteStorage: {(/* Args Unknown */): unknown};
  GetISteamScreenshots: {(/* Args Unknown */): unknown};
  GetISteamGameSearch: {(/* Args Unknown */): unknown};
  GetIPCCallCount: {(/* Args Unknown */): unknown};
  SetWarningMessageHook: {(/* Args Unknown */): unknown};
  BShutdownIfAllPipesClosed: {(/* Args Unknown */): unknown};
  GetISteamHTTP: {(/* Args Unknown */): unknown};
  GetISteamController: {(/* Args Unknown */): unknown};
  GetISteamUGC: {(/* Args Unknown */): unknown};
  GetISteamAppList: {(/* Args Unknown */): unknown};
  GetISteamMusic: {(/* Args Unknown */): unknown};
  GetISteamMusicRemote: {(/* Args Unknown */): unknown};
  GetISteamHTMLSurface: {(/* Args Unknown */): unknown};
  GetISteamInventory: {(/* Args Unknown */): unknown};
  GetISteamVideo: {(/* Args Unknown */): unknown};
  GetISteamParentalSettings: {(/* Args Unknown */): unknown};
  GetISteamInput: {(/* Args Unknown */): unknown};
  GetISteamParties: {(/* Args Unknown */): unknown};
  GetISteamRemotePlay: {(/* Args Unknown */): unknown};
}
declare interface SteamUser {
  GetHSteamUser: {(/* Args Unknown */): unknown};
  BLoggedOn: {(/* Args Unknown */): unknown};
  GetSteamID: {(/* Args Unknown */): unknown};
  InitiateGameConnection_DEPRECATED: {(/* Args Unknown */): unknown};
  TerminateGameConnection_DEPRECATED: {(/* Args Unknown */): unknown};
  TrackAppUsageEvent: {(/* Args Unknown */): unknown};
  GetUserDataFolder: {(/* Args Unknown */): unknown};
  StartVoiceRecording: {(/* Args Unknown */): unknown};
  StopVoiceRecording: {(/* Args Unknown */): unknown};
  GetAvailableVoice: {(/* Args Unknown */): unknown};
  GetVoice: {(/* Args Unknown */): unknown};
  DecompressVoice: {(/* Args Unknown */): unknown};
  GetVoiceOptimalSampleRate: {(/* Args Unknown */): unknown};
  GetAuthSessionTicket: {(/* Args Unknown */): unknown};
  BeginAuthSession: {(/* Args Unknown */): unknown};
  EndAuthSession: {(/* Args Unknown */): unknown};
  CancelAuthTicket: {(/* Args Unknown */): unknown};
  UserHasLicenseForApp: {(/* Args Unknown */): unknown};
  BIsBehindNAT: {(/* Args Unknown */): unknown};
  AdvertiseGame: {(/* Args Unknown */): unknown};
  RequestEncryptedAppTicket: {(pDataToInclude: unknown, cbDataToInclude: number): Promise<{ m_eResult: SteamEnums.EResult }>};
  GetEncryptedAppTicket: {(/* Args Unknown */): unknown};
  GetGameBadgeLevel: {(/* Args Unknown */): unknown};
  GetPlayerSteamLevel: {(/* Args Unknown */): unknown};
  RequestStoreAuthURL: {(pchRedirectURL: string): Promise<{ m_szURL: string }>};
  BIsPhoneVerified: {(/* Args Unknown */): unknown};
  BIsTwoFactorEnabled: {(/* Args Unknown */): unknown};
  BIsPhoneIdentifying: {(/* Args Unknown */): unknown};
  BIsPhoneRequiringVerification: {(/* Args Unknown */): unknown};
  GetMarketEligibility: {(): Promise<{ m_bAllowed: boolean, m_eNotAllowedReason: SteamEnums.EMarketNotAllowedReasonFlags, m_rtAllowedAtTime: number, m_cdaySteamGuardRequiredDays: number, m_cdayNewDeviceCooldown: number }>};
  GetDurationControl: {(): Promise<{ m_eResult: SteamEnums.EResult, m_appid: number, m_bApplicable: boolean, m_csecsLast5h: number, m_progress: SteamEnums.EDurationControlProgress, m_notification: SteamEnums.EDurationControlNotification, m_csecsToday: number, m_csecsRemaining: number }>};
  BSetDurationControlOnlineState: {(/* Args Unknown */): unknown};
}
declare interface SteamFriends {
  GetPersonaName: {(/* Args Unknown */): unknown};
  SetPersonaName: {(pchPersonaName: string): Promise<{ m_bSuccess: boolean, m_bLocalSuccess: boolean, m_result: SteamEnums.EResult }>};
  GetPersonaState: {(/* Args Unknown */): unknown};
  GetFriendCount: {(/* Args Unknown */): unknown};
  GetFriendByIndex: {(/* Args Unknown */): unknown};
  GetFriendRelationship: {(/* Args Unknown */): unknown};
  GetFriendPersonaState: {(/* Args Unknown */): unknown};
  GetFriendPersonaName: {(/* Args Unknown */): unknown};
  GetFriendGamePlayed: {(/* Args Unknown */): unknown};
  GetFriendPersonaNameHistory: {(/* Args Unknown */): unknown};
  GetFriendSteamLevel: {(/* Args Unknown */): unknown};
  GetPlayerNickname: {(/* Args Unknown */): unknown};
  GetFriendsGroupCount: {(/* Args Unknown */): unknown};
  GetFriendsGroupIDByIndex: {(/* Args Unknown */): unknown};
  GetFriendsGroupName: {(/* Args Unknown */): unknown};
  GetFriendsGroupMembersCount: {(/* Args Unknown */): unknown};
  GetFriendsGroupMembersList: {(/* Args Unknown */): unknown};
  HasFriend: {(/* Args Unknown */): unknown};
  GetClanCount: {(/* Args Unknown */): unknown};
  GetClanByIndex: {(/* Args Unknown */): unknown};
  GetClanName: {(/* Args Unknown */): unknown};
  GetClanTag: {(/* Args Unknown */): unknown};
  GetClanActivityCounts: {(/* Args Unknown */): unknown};
  DownloadClanActivityCounts: {(psteamIDClans: unknown, cClansToRequest: number): Promise<{ m_bSuccess: boolean }>};
  GetFriendCountFromSource: {(/* Args Unknown */): unknown};
  GetFriendFromSourceByIndex: {(/* Args Unknown */): unknown};
  IsUserInSource: {(/* Args Unknown */): unknown};
  SetInGameVoiceSpeaking: {(/* Args Unknown */): unknown};
  ActivateGameOverlay: {(/* Args Unknown */): unknown};
  ActivateGameOverlayToUser: {(/* Args Unknown */): unknown};
  ActivateGameOverlayToWebPage: {(/* Args Unknown */): unknown};
  ActivateGameOverlayToStore: {(/* Args Unknown */): unknown};
  SetPlayedWith: {(/* Args Unknown */): unknown};
  ActivateGameOverlayInviteDialog: {(/* Args Unknown */): unknown};
  GetSmallFriendAvatar: {(/* Args Unknown */): unknown};
  GetMediumFriendAvatar: {(/* Args Unknown */): unknown};
  GetLargeFriendAvatar: {(/* Args Unknown */): unknown};
  RequestUserInformation: {(/* Args Unknown */): unknown};
  RequestClanOfficerList: {(steamIDClan: unknown): Promise<{ m_steamIDClan: unknown, m_cOfficers: number, m_bSuccess: number }>};
  GetClanOwner: {(/* Args Unknown */): unknown};
  GetClanOfficerCount: {(/* Args Unknown */): unknown};
  GetClanOfficerByIndex: {(/* Args Unknown */): unknown};
  GetUserRestrictions: {(/* Args Unknown */): unknown};
  SetRichPresence: {(/* Args Unknown */): unknown};
  ClearRichPresence: {(/* Args Unknown */): unknown};
  GetFriendRichPresence: {(/* Args Unknown */): unknown};
  GetFriendRichPresenceKeyCount: {(/* Args Unknown */): unknown};
  GetFriendRichPresenceKeyByIndex: {(/* Args Unknown */): unknown};
  RequestFriendRichPresence: {(/* Args Unknown */): unknown};
  InviteUserToGame: {(/* Args Unknown */): unknown};
  GetCoplayFriendCount: {(/* Args Unknown */): unknown};
  GetCoplayFriend: {(/* Args Unknown */): unknown};
  GetFriendCoplayTime: {(/* Args Unknown */): unknown};
  GetFriendCoplayGame: {(/* Args Unknown */): unknown};
  JoinClanChatRoom: {(steamIDClan: unknown): Promise<{ m_steamIDClanChat: unknown, m_eChatRoomEnterResponse: SteamEnums.EChatRoomEnterResponse }>};
  LeaveClanChatRoom: {(/* Args Unknown */): unknown};
  GetClanChatMemberCount: {(/* Args Unknown */): unknown};
  GetChatMemberByIndex: {(/* Args Unknown */): unknown};
  SendClanChatMessage: {(/* Args Unknown */): unknown};
  GetClanChatMessage: {(/* Args Unknown */): unknown};
  IsClanChatAdmin: {(/* Args Unknown */): unknown};
  IsClanChatWindowOpenInSteam: {(/* Args Unknown */): unknown};
  OpenClanChatWindowInSteam: {(/* Args Unknown */): unknown};
  CloseClanChatWindowInSteam: {(/* Args Unknown */): unknown};
  SetListenForFriendsMessages: {(/* Args Unknown */): unknown};
  ReplyToFriendMessage: {(/* Args Unknown */): unknown};
  GetFriendMessage: {(/* Args Unknown */): unknown};
  GetFollowerCount: {(steamID: unknown): Promise<{ m_eResult: SteamEnums.EResult, m_steamID: unknown, m_nCount: number }>};
  IsFollowing: {(steamID: unknown): Promise<{ m_eResult: SteamEnums.EResult, m_steamID: unknown, m_bIsFollowing: boolean }>};
  EnumerateFollowingList: {(unStartIndex: number): Promise<{ m_eResult: SteamEnums.EResult, m_rgSteamID: unknown, m_nResultsReturned: number, m_nTotalResultCount: number }>};
  IsClanPublic: {(/* Args Unknown */): unknown};
  IsClanOfficialGameGroup: {(/* Args Unknown */): unknown};
  GetNumChatsWithUnreadPriorityMessages: {(/* Args Unknown */): unknown};
  ActivateGameOverlayRemotePlayTogetherInviteDialog: {(/* Args Unknown */): unknown};
  RegisterProtocolInOverlayBrowser: {(/* Args Unknown */): unknown};
  ActivateGameOverlayInviteDialogConnectString: {(/* Args Unknown */): unknown};
}
declare interface SteamUtils {
  GetSecondsSinceAppActive: {(/* Args Unknown */): unknown};
  GetSecondsSinceComputerActive: {(/* Args Unknown */): unknown};
  GetConnectedUniverse: {(/* Args Unknown */): unknown};
  GetServerRealTime: {(/* Args Unknown */): unknown};
  GetIPCountry: {(/* Args Unknown */): unknown};
  GetImageSize: {(/* Args Unknown */): unknown};
  GetImageRGBA: {(/* Args Unknown */): unknown};
  GetCurrentBatteryPower: {(/* Args Unknown */): unknown};
  GetAppID: {(/* Args Unknown */): unknown};
  SetOverlayNotificationPosition: {(/* Args Unknown */): unknown};
  IsAPICallCompleted: {(/* Args Unknown */): unknown};
  GetAPICallFailureReason: {(/* Args Unknown */): unknown};
  GetAPICallResult: {(/* Args Unknown */): unknown};
  GetIPCCallCount: {(/* Args Unknown */): unknown};
  SetWarningMessageHook: {(/* Args Unknown */): unknown};
  IsOverlayEnabled: {(/* Args Unknown */): unknown};
  BOverlayNeedsPresent: {(/* Args Unknown */): unknown};
  CheckFileSignature: {(szFileName: string): Promise<{ m_eCheckFileSignature: SteamEnums.ECheckFileSignature }>};
  ShowGamepadTextInput: {(/* Args Unknown */): unknown};
  GetEnteredGamepadTextLength: {(/* Args Unknown */): unknown};
  GetEnteredGamepadTextInput: {(/* Args Unknown */): unknown};
  GetSteamUILanguage: {(/* Args Unknown */): unknown};
  IsSteamRunningInVR: {(/* Args Unknown */): unknown};
  SetOverlayNotificationInset: {(/* Args Unknown */): unknown};
  IsSteamInBigPictureMode: {(/* Args Unknown */): unknown};
  StartVRDashboard: {(/* Args Unknown */): unknown};
  IsVRHeadsetStreamingEnabled: {(/* Args Unknown */): unknown};
  SetVRHeadsetStreamingEnabled: {(/* Args Unknown */): unknown};
  IsSteamChinaLauncher: {(/* Args Unknown */): unknown};
  InitFilterText: {(/* Args Unknown */): unknown};
  FilterText: {(/* Args Unknown */): unknown};
  GetIPv6ConnectivityState: {(/* Args Unknown */): unknown};
  IsSteamRunningOnSteamDeck: {(/* Args Unknown */): unknown};
  ShowFloatingGamepadTextInput: {(/* Args Unknown */): unknown};
  SetGameLauncherMode: {(/* Args Unknown */): unknown};
  DismissFloatingGamepadTextInput: {(/* Args Unknown */): unknown};
}
declare interface SteamMatchmaking {
  GetFavoriteGameCount: {(/* Args Unknown */): unknown};
  GetFavoriteGame: {(/* Args Unknown */): unknown};
  AddFavoriteGame: {(/* Args Unknown */): unknown};
  RemoveFavoriteGame: {(/* Args Unknown */): unknown};
  RequestLobbyList: {(): Promise<{ m_nLobbiesMatching: number }>};
  AddRequestLobbyListStringFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListNumericalFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListNearValueFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListFilterSlotsAvailable: {(/* Args Unknown */): unknown};
  AddRequestLobbyListDistanceFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListResultCountFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListCompatibleMembersFilter: {(/* Args Unknown */): unknown};
  GetLobbyByIndex: {(/* Args Unknown */): unknown};
  CreateLobby: {(eLobbyType: SteamEnums.ELobbyType, cMaxMembers: number): Promise<{ m_eResult: SteamEnums.EResult, m_ulSteamIDLobby: number }>};
  JoinLobby: {(steamIDLobby: unknown): Promise<{ m_ulSteamIDLobby: number, m_rgfChatPermissions: number, m_bLocked: boolean, m_EChatRoomEnterResponse: number }>};
  LeaveLobby: {(/* Args Unknown */): unknown};
  InviteUserToLobby: {(/* Args Unknown */): unknown};
  GetNumLobbyMembers: {(/* Args Unknown */): unknown};
  GetLobbyMemberByIndex: {(/* Args Unknown */): unknown};
  GetLobbyData: {(/* Args Unknown */): unknown};
  SetLobbyData: {(/* Args Unknown */): unknown};
  GetLobbyDataCount: {(/* Args Unknown */): unknown};
  GetLobbyDataByIndex: {(/* Args Unknown */): unknown};
  DeleteLobbyData: {(/* Args Unknown */): unknown};
  GetLobbyMemberData: {(/* Args Unknown */): unknown};
  SetLobbyMemberData: {(/* Args Unknown */): unknown};
  SendLobbyChatMsg: {(/* Args Unknown */): unknown};
  GetLobbyChatEntry: {(/* Args Unknown */): unknown};
  RequestLobbyData: {(/* Args Unknown */): unknown};
  SetLobbyGameServer: {(/* Args Unknown */): unknown};
  GetLobbyGameServer: {(/* Args Unknown */): unknown};
  SetLobbyMemberLimit: {(/* Args Unknown */): unknown};
  GetLobbyMemberLimit: {(/* Args Unknown */): unknown};
  SetLobbyType: {(/* Args Unknown */): unknown};
  SetLobbyJoinable: {(/* Args Unknown */): unknown};
  GetLobbyOwner: {(/* Args Unknown */): unknown};
  SetLobbyOwner: {(/* Args Unknown */): unknown};
  SetLinkedLobby: {(/* Args Unknown */): unknown};
}
declare interface SteamMatchmakingServers {
  RequestInternetServerList: {(/* Args Unknown */): unknown};
  RequestLANServerList: {(/* Args Unknown */): unknown};
  RequestFriendsServerList: {(/* Args Unknown */): unknown};
  RequestFavoritesServerList: {(/* Args Unknown */): unknown};
  RequestHistoryServerList: {(/* Args Unknown */): unknown};
  RequestSpectatorServerList: {(/* Args Unknown */): unknown};
  ReleaseRequest: {(/* Args Unknown */): unknown};
  GetServerDetails: {(/* Args Unknown */): unknown};
  CancelQuery: {(/* Args Unknown */): unknown};
  RefreshQuery: {(/* Args Unknown */): unknown};
  IsRefreshing: {(/* Args Unknown */): unknown};
  GetServerCount: {(/* Args Unknown */): unknown};
  RefreshServer: {(/* Args Unknown */): unknown};
  PingServer: {(/* Args Unknown */): unknown};
  PlayerDetails: {(/* Args Unknown */): unknown};
  ServerRules: {(/* Args Unknown */): unknown};
  CancelServerQuery: {(/* Args Unknown */): unknown};
}
declare interface SteamGameSearch {
  AddGameSearchParams: {(/* Args Unknown */): unknown};
  SearchForGameWithLobby: {(/* Args Unknown */): unknown};
  SearchForGameSolo: {(/* Args Unknown */): unknown};
  AcceptGame: {(/* Args Unknown */): unknown};
  DeclineGame: {(/* Args Unknown */): unknown};
  RetrieveConnectionDetails: {(/* Args Unknown */): unknown};
  EndGameSearch: {(/* Args Unknown */): unknown};
  SetGameHostParams: {(/* Args Unknown */): unknown};
  SetConnectionDetails: {(/* Args Unknown */): unknown};
  RequestPlayersForGame: {(/* Args Unknown */): unknown};
  HostConfirmGameStart: {(/* Args Unknown */): unknown};
  CancelRequestPlayersForGame: {(/* Args Unknown */): unknown};
  SubmitPlayerResult: {(/* Args Unknown */): unknown};
  EndGame: {(/* Args Unknown */): unknown};
}
declare interface SteamParties {
  GetNumActiveBeacons: {(/* Args Unknown */): unknown};
  GetBeaconByIndex: {(/* Args Unknown */): unknown};
  GetBeaconDetails: {(/* Args Unknown */): unknown};
  JoinParty: {(ulBeaconID: number): Promise<{ m_eResult: SteamEnums.EResult, m_ulBeaconID: number, m_SteamIDBeaconOwner: unknown, m_rgchConnectString: string }>};
  GetNumAvailableBeaconLocations: {(/* Args Unknown */): unknown};
  GetAvailableBeaconLocations: {(/* Args Unknown */): unknown};
  CreateBeacon: {(unOpenSlots: number, pBeaconLocation: unknown, pchConnectString: string, pchMetadata: string): Promise<{ m_eResult: SteamEnums.EResult, m_ulBeaconID: number }>};
  OnReservationCompleted: {(/* Args Unknown */): unknown};
  CancelReservation: {(/* Args Unknown */): unknown};
  ChangeNumOpenSlots: {(ulBeacon: number, unOpenSlots: number): Promise<{ m_eResult: SteamEnums.EResult }>};
  DestroyBeacon: {(/* Args Unknown */): unknown};
  GetBeaconLocationData: {(/* Args Unknown */): unknown};
}
declare interface SteamUserStats {
  RequestCurrentStats: {(/* Args Unknown */): unknown};
  GetStat: {(/* Args Unknown */): unknown};
  SetStat: {(/* Args Unknown */): unknown};
  UpdateAvgRateStat: {(/* Args Unknown */): unknown};
  GetAchievement: {(/* Args Unknown */): unknown};
  SetAchievement: {(/* Args Unknown */): unknown};
  ClearAchievement: {(/* Args Unknown */): unknown};
  GetAchievementAndUnlockTime: {(/* Args Unknown */): unknown};
  StoreStats: {(/* Args Unknown */): unknown};
  GetAchievementIcon: {(/* Args Unknown */): unknown};
  GetAchievementDisplayAttribute: {(/* Args Unknown */): unknown};
  IndicateAchievementProgress: {(/* Args Unknown */): unknown};
  GetNumAchievements: {(/* Args Unknown */): unknown};
  GetAchievementName: {(/* Args Unknown */): unknown};
  RequestUserStats: {(steamIDUser: unknown): Promise<{ m_eResult: SteamEnums.EResult, m_steamIDUser: unknown }>};
  GetUserStat: {(/* Args Unknown */): unknown};
  GetUserAchievement: {(/* Args Unknown */): unknown};
  GetUserAchievementAndUnlockTime: {(/* Args Unknown */): unknown};
  ResetAllStats: {(/* Args Unknown */): unknown};
  FindOrCreateLeaderboard: {(pchLeaderboardName: string, eLeaderboardSortMethod: SteamEnums.ELeaderboardSortMethod, eLeaderboardDisplayType: SteamEnums.ELeaderboardDisplayType): Promise<{ m_hSteamLeaderboard: number, m_bLeaderboardFound: number }>};
  FindLeaderboard: {(pchLeaderboardName: string): Promise<{ m_hSteamLeaderboard: number, m_bLeaderboardFound: number }>};
  GetLeaderboardName: {(/* Args Unknown */): unknown};
  GetLeaderboardEntryCount: {(/* Args Unknown */): unknown};
  GetLeaderboardSortMethod: {(/* Args Unknown */): unknown};
  GetLeaderboardDisplayType: {(/* Args Unknown */): unknown};
  DownloadLeaderboardEntries: {(hSteamLeaderboard: number, eLeaderboardDataRequest: SteamEnums.ELeaderboardDataRequest, nRangeStart: number, nRangeEnd: number): Promise<{ m_hSteamLeaderboard: number, m_hSteamLeaderboardEntries: number, m_cEntryCount: number }>};
  DownloadLeaderboardEntriesForUsers: {(hSteamLeaderboard: number, prgUsers: unknown, cUsers: number): Promise<{ m_hSteamLeaderboard: number, m_hSteamLeaderboardEntries: number, m_cEntryCount: number }>};
  GetDownloadedLeaderboardEntry: {(/* Args Unknown */): unknown};
  UploadLeaderboardScore: {(hSteamLeaderboard: number, eLeaderboardUploadScoreMethod: SteamEnums.ELeaderboardUploadScoreMethod, nScore: number, pScoreDetails: unknown, cScoreDetailsCount: number): Promise<{ m_bSuccess: number, m_hSteamLeaderboard: number, m_nScore: number, m_bScoreChanged: number, m_nGlobalRankNew: number, m_nGlobalRankPrevious: number }>};
  AttachLeaderboardUGC: {(hSteamLeaderboard: number, hUGC: number): Promise<{ m_eResult: SteamEnums.EResult, m_hSteamLeaderboard: number }>};
  GetNumberOfCurrentPlayers: {(): Promise<{ m_bSuccess: number, m_cPlayers: number }>};
  RequestGlobalAchievementPercentages: {(): Promise<{ m_nGameID: number, m_eResult: SteamEnums.EResult }>};
  GetMostAchievedAchievementInfo: {(/* Args Unknown */): unknown};
  GetNextMostAchievedAchievementInfo: {(/* Args Unknown */): unknown};
  GetAchievementAchievedPercent: {(/* Args Unknown */): unknown};
  RequestGlobalStats: {(nHistoryDays: number): Promise<{ m_nGameID: number, m_eResult: SteamEnums.EResult }>};
  GetGlobalStat: {(/* Args Unknown */): unknown};
  GetGlobalStatHistory: {(/* Args Unknown */): unknown};
  GetAchievementProgressLimits: {(/* Args Unknown */): unknown};
}
declare interface SteamApps {
  BIsSubscribed: {(/* Args Unknown */): unknown};
  BIsLowViolence: {(/* Args Unknown */): unknown};
  BIsCybercafe: {(/* Args Unknown */): unknown};
  BIsVACBanned: {(/* Args Unknown */): unknown};
  GetCurrentGameLanguage: {(/* Args Unknown */): unknown};
  GetAvailableGameLanguages: {(/* Args Unknown */): unknown};
  BIsSubscribedApp: {(/* Args Unknown */): unknown};
  BIsDlcInstalled: {(/* Args Unknown */): unknown};
  GetEarliestPurchaseUnixTime: {(/* Args Unknown */): unknown};
  BIsSubscribedFromFreeWeekend: {(/* Args Unknown */): unknown};
  GetDLCCount: {(/* Args Unknown */): unknown};
  BGetDLCDataByIndex: {(/* Args Unknown */): unknown};
  InstallDLC: {(/* Args Unknown */): unknown};
  UninstallDLC: {(/* Args Unknown */): unknown};
  RequestAppProofOfPurchaseKey: {(/* Args Unknown */): unknown};
  GetCurrentBetaName: {(/* Args Unknown */): unknown};
  MarkContentCorrupt: {(/* Args Unknown */): unknown};
  GetInstalledDepots: {(/* Args Unknown */): unknown};
  GetAppInstallDir: {(/* Args Unknown */): unknown};
  BIsAppInstalled: {(/* Args Unknown */): unknown};
  GetAppOwner: {(/* Args Unknown */): unknown};
  GetLaunchQueryParam: {(/* Args Unknown */): unknown};
  GetDlcDownloadProgress: {(/* Args Unknown */): unknown};
  GetAppBuildId: {(/* Args Unknown */): unknown};
  RequestAllProofOfPurchaseKeys: {(/* Args Unknown */): unknown};
  GetFileDetails: {(pszFileName: string): Promise<{ m_eResult: SteamEnums.EResult, m_ulFileSize: number, m_FileSHA: number, m_unFlags: number }>};
  GetLaunchCommandLine: {(/* Args Unknown */): unknown};
  BIsSubscribedFromFamilySharing: {(/* Args Unknown */): unknown};
  BIsTimedTrial: {(/* Args Unknown */): unknown};
}
declare interface SteamNetworking {
  SendP2PPacket: {(/* Args Unknown */): unknown};
  IsP2PPacketAvailable: {(/* Args Unknown */): unknown};
  ReadP2PPacket: {(/* Args Unknown */): unknown};
  AcceptP2PSessionWithUser: {(/* Args Unknown */): unknown};
  CloseP2PSessionWithUser: {(/* Args Unknown */): unknown};
  CloseP2PChannelWithUser: {(/* Args Unknown */): unknown};
  GetP2PSessionState: {(/* Args Unknown */): unknown};
  AllowP2PPacketRelay: {(/* Args Unknown */): unknown};
  CreateListenSocket: {(/* Args Unknown */): unknown};
  CreateP2PConnectionSocket: {(/* Args Unknown */): unknown};
  CreateConnectionSocket: {(/* Args Unknown */): unknown};
  DestroySocket: {(/* Args Unknown */): unknown};
  DestroyListenSocket: {(/* Args Unknown */): unknown};
  SendDataOnSocket: {(/* Args Unknown */): unknown};
  IsDataAvailableOnSocket: {(/* Args Unknown */): unknown};
  RetrieveDataFromSocket: {(/* Args Unknown */): unknown};
  IsDataAvailable: {(/* Args Unknown */): unknown};
  RetrieveData: {(/* Args Unknown */): unknown};
  GetSocketInfo: {(/* Args Unknown */): unknown};
  GetListenSocketInfo: {(/* Args Unknown */): unknown};
  GetSocketConnectionType: {(/* Args Unknown */): unknown};
  GetMaxPacketSize: {(/* Args Unknown */): unknown};
}
declare interface SteamRemoteStorage {
  FileWrite: {(/* Args Unknown */): unknown};
  FileRead: {(/* Args Unknown */): unknown};
  FileWriteAsync: {(pchFile: string, pvData: unknown, cubData: number): Promise<{ m_eResult: SteamEnums.EResult }>};
  FileReadAsync: {(pchFile: string, nOffset: number, cubToRead: number): Promise<{ m_hFileReadAsync: number, m_eResult: SteamEnums.EResult, m_nOffset: number, m_cubRead: number }>};
  FileReadAsyncComplete: {(/* Args Unknown */): unknown};
  FileForget: {(/* Args Unknown */): unknown};
  FileDelete: {(/* Args Unknown */): unknown};
  FileShare: {(pchFile: string): Promise<{ m_eResult: SteamEnums.EResult, m_hFile: number, m_rgchFilename: string }>};
  SetSyncPlatforms: {(/* Args Unknown */): unknown};
  FileWriteStreamOpen: {(/* Args Unknown */): unknown};
  FileWriteStreamWriteChunk: {(/* Args Unknown */): unknown};
  FileWriteStreamClose: {(/* Args Unknown */): unknown};
  FileWriteStreamCancel: {(/* Args Unknown */): unknown};
  FileExists: {(/* Args Unknown */): unknown};
  FilePersisted: {(/* Args Unknown */): unknown};
  GetFileSize: {(/* Args Unknown */): unknown};
  GetFileTimestamp: {(/* Args Unknown */): unknown};
  GetSyncPlatforms: {(/* Args Unknown */): unknown};
  GetFileCount: {(/* Args Unknown */): unknown};
  GetFileNameAndSize: {(/* Args Unknown */): unknown};
  GetQuota: {(/* Args Unknown */): unknown};
  IsCloudEnabledForAccount: {(/* Args Unknown */): unknown};
  IsCloudEnabledForApp: {(/* Args Unknown */): unknown};
  SetCloudEnabledForApp: {(/* Args Unknown */): unknown};
  UGCDownload: {(hContent: number, unPriority: number): Promise<{ m_eResult: SteamEnums.EResult, m_hFile: number, m_nAppID: number, m_nSizeInBytes: number, m_pchFileName: string, m_ulSteamIDOwner: number }>};
  GetUGCDownloadProgress: {(/* Args Unknown */): unknown};
  GetUGCDetails: {(/* Args Unknown */): unknown};
  UGCRead: {(/* Args Unknown */): unknown};
  GetCachedUGCCount: {(/* Args Unknown */): unknown};
  GetCachedUGCHandle: {(/* Args Unknown */): unknown};
  PublishWorkshopFile: {(pchFile: string, pchPreviewFile: string, nConsumerAppId: number, pchTitle: string, pchDescription: string, eVisibility: SteamEnums.ERemoteStoragePublishedFileVisibility, pTags: unknown, eWorkshopFileType: SteamEnums.EWorkshopFileType): Promise<{ m_dPercentFile: number, m_bPreview: boolean }>};
  CreatePublishedFileUpdateRequest: {(/* Args Unknown */): unknown};
  UpdatePublishedFileFile: {(/* Args Unknown */): unknown};
  UpdatePublishedFilePreviewFile: {(/* Args Unknown */): unknown};
  UpdatePublishedFileTitle: {(/* Args Unknown */): unknown};
  UpdatePublishedFileDescription: {(/* Args Unknown */): unknown};
  UpdatePublishedFileVisibility: {(/* Args Unknown */): unknown};
  UpdatePublishedFileTags: {(/* Args Unknown */): unknown};
  CommitPublishedFileUpdate: {(updateHandle: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number, m_bUserNeedsToAcceptWorkshopLegalAgreement: boolean }>};
  GetPublishedFileDetails: {(unPublishedFileId: number, unMaxSecondsOld: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number, m_nCreatorAppID: number, m_nConsumerAppID: number, m_rgchTitle: string, m_rgchDescription: string, m_hFile: number, m_hPreviewFile: number, m_ulSteamIDOwner: number, m_rtimeCreated: number, m_rtimeUpdated: number, m_eVisibility: SteamEnums.ERemoteStoragePublishedFileVisibility, m_bBanned: boolean, m_rgchTags: string, m_bTagsTruncated: boolean, m_pchFileName: string, m_nFileSize: number, m_nPreviewFileSize: number, m_rgchURL: string, m_eFileType: SteamEnums.EWorkshopFileType, m_bAcceptedForUse: boolean }>};
  DeletePublishedFile: {(unPublishedFileId: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number }>};
  EnumerateUserPublishedFiles: {(unStartIndex: number): Promise<{ m_eResult: SteamEnums.EResult, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: number[] }>};
  SubscribePublishedFile: {(unPublishedFileId: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number }>};
  EnumerateUserSubscribedFiles: {(unStartIndex: number): Promise<{ m_eResult: SteamEnums.EResult, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: number[], m_rgRTimeSubscribed: number }>};
  UnsubscribePublishedFile: {(unPublishedFileId: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number }>};
  UpdatePublishedFileSetChangeDescription: {(/* Args Unknown */): unknown};
  GetPublishedItemVoteDetails: {(unPublishedFileId: number): Promise<{ m_eResult: SteamEnums.EResult, m_unPublishedFileId: number, m_nVotesFor: number, m_nVotesAgainst: number, m_nReports: number, m_fScore: number }>};
  UpdateUserPublishedItemVote: {(unPublishedFileId: number, bVoteUp: boolean): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number }>};
  GetUserPublishedItemVoteDetails: {(unPublishedFileId: number): Promise<{ m_eResult: SteamEnums.EResult, m_unPublishedFileId: number, m_nVotesFor: number, m_nVotesAgainst: number, m_nReports: number, m_fScore: number }>};
  EnumerateUserSharedWorkshopFiles: {(steamId: unknown, unStartIndex: number, pRequiredTags: unknown, pExcludedTags: unknown): Promise<{ m_eResult: SteamEnums.EResult, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: number[] }>};
  PublishVideo: {(eVideoProvider: SteamEnums.EWorkshopVideoProvider, pchVideoAccount: string, pchVideoIdentifier: string, pchPreviewFile: string, nConsumerAppId: number, pchTitle: string, pchDescription: string, eVisibility: SteamEnums.ERemoteStoragePublishedFileVisibility, pTags: unknown): Promise<{ m_dPercentFile: number, m_bPreview: boolean }>};
  SetUserPublishedFileAction: {(unPublishedFileId: number, eAction: SteamEnums.EWorkshopFileAction): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number, m_eAction: SteamEnums.EWorkshopFileAction }>};
  EnumeratePublishedFilesByUserAction: {(eAction: SteamEnums.EWorkshopFileAction, unStartIndex: number): Promise<{ m_eResult: SteamEnums.EResult, m_eAction: SteamEnums.EWorkshopFileAction, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: number[], m_rgRTimeUpdated: number }>};
  EnumeratePublishedWorkshopFiles: {(eEnumerationType: SteamEnums.EWorkshopEnumerationType, unStartIndex: number, unCount: number, unDays: number, pTags: unknown, pUserTags: unknown): Promise<{ m_eResult: SteamEnums.EResult, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: number[], m_rgScore: number, m_nAppId: number, m_unStartIndex: number }>};
  UGCDownloadToLocation: {(hContent: number, pchLocation: string, unPriority: number): Promise<{ m_eResult: SteamEnums.EResult, m_hFile: number, m_nAppID: number, m_nSizeInBytes: number, m_pchFileName: string, m_ulSteamIDOwner: number }>};
  GetLocalFileChangeCount: {(/* Args Unknown */): unknown};
  GetLocalFileChange: {(/* Args Unknown */): unknown};
  BeginFileWriteBatch: {(/* Args Unknown */): unknown};
  EndFileWriteBatch: {(/* Args Unknown */): unknown};
}
declare interface SteamScreenshots {
  WriteScreenshot: {(/* Args Unknown */): unknown};
  AddScreenshotToLibrary: {(/* Args Unknown */): unknown};
  TriggerScreenshot: {(/* Args Unknown */): unknown};
  HookScreenshots: {(/* Args Unknown */): unknown};
  SetLocation: {(/* Args Unknown */): unknown};
  TagUser: {(/* Args Unknown */): unknown};
  TagPublishedFile: {(/* Args Unknown */): unknown};
  IsScreenshotsHooked: {(/* Args Unknown */): unknown};
  AddVRScreenshotToLibrary: {(/* Args Unknown */): unknown};
}
declare interface SteamMusic {
  BIsEnabled: {(/* Args Unknown */): unknown};
  BIsPlaying: {(/* Args Unknown */): unknown};
  GetPlaybackStatus: {(/* Args Unknown */): unknown};
  Play: {(/* Args Unknown */): unknown};
  Pause: {(/* Args Unknown */): unknown};
  PlayPrevious: {(/* Args Unknown */): unknown};
  PlayNext: {(/* Args Unknown */): unknown};
  SetVolume: {(/* Args Unknown */): unknown};
  GetVolume: {(/* Args Unknown */): unknown};
}
declare interface SteamMusicRemote {
  RegisterSteamMusicRemote: {(/* Args Unknown */): unknown};
  DeregisterSteamMusicRemote: {(/* Args Unknown */): unknown};
  BIsCurrentMusicRemote: {(/* Args Unknown */): unknown};
  BActivationSuccess: {(/* Args Unknown */): unknown};
  SetDisplayName: {(/* Args Unknown */): unknown};
  SetPNGIcon_64x64: {(/* Args Unknown */): unknown};
  EnablePlayPrevious: {(/* Args Unknown */): unknown};
  EnablePlayNext: {(/* Args Unknown */): unknown};
  EnableShuffled: {(/* Args Unknown */): unknown};
  EnableLooped: {(/* Args Unknown */): unknown};
  EnableQueue: {(/* Args Unknown */): unknown};
  EnablePlaylists: {(/* Args Unknown */): unknown};
  UpdatePlaybackStatus: {(/* Args Unknown */): unknown};
  UpdateShuffled: {(/* Args Unknown */): unknown};
  UpdateLooped: {(/* Args Unknown */): unknown};
  UpdateVolume: {(/* Args Unknown */): unknown};
  CurrentEntryWillChange: {(/* Args Unknown */): unknown};
  CurrentEntryIsAvailable: {(/* Args Unknown */): unknown};
  UpdateCurrentEntryText: {(/* Args Unknown */): unknown};
  UpdateCurrentEntryElapsedSeconds: {(/* Args Unknown */): unknown};
  UpdateCurrentEntryCoverArt: {(/* Args Unknown */): unknown};
  CurrentEntryDidChange: {(/* Args Unknown */): unknown};
  QueueWillChange: {(/* Args Unknown */): unknown};
  ResetQueueEntries: {(/* Args Unknown */): unknown};
  SetQueueEntry: {(/* Args Unknown */): unknown};
  SetCurrentQueueEntry: {(/* Args Unknown */): unknown};
  QueueDidChange: {(/* Args Unknown */): unknown};
  PlaylistWillChange: {(/* Args Unknown */): unknown};
  ResetPlaylistEntries: {(/* Args Unknown */): unknown};
  SetPlaylistEntry: {(/* Args Unknown */): unknown};
  SetCurrentPlaylistEntry: {(/* Args Unknown */): unknown};
  PlaylistDidChange: {(/* Args Unknown */): unknown};
}
declare interface SteamHTTP {
  CreateHTTPRequest: {(/* Args Unknown */): unknown};
  SetHTTPRequestContextValue: {(/* Args Unknown */): unknown};
  SetHTTPRequestNetworkActivityTimeout: {(/* Args Unknown */): unknown};
  SetHTTPRequestHeaderValue: {(/* Args Unknown */): unknown};
  SetHTTPRequestGetOrPostParameter: {(/* Args Unknown */): unknown};
  SendHTTPRequest: {(/* Args Unknown */): unknown};
  SendHTTPRequestAndStreamResponse: {(/* Args Unknown */): unknown};
  DeferHTTPRequest: {(/* Args Unknown */): unknown};
  PrioritizeHTTPRequest: {(/* Args Unknown */): unknown};
  GetHTTPResponseHeaderSize: {(/* Args Unknown */): unknown};
  GetHTTPResponseHeaderValue: {(/* Args Unknown */): unknown};
  GetHTTPResponseBodySize: {(/* Args Unknown */): unknown};
  GetHTTPResponseBodyData: {(/* Args Unknown */): unknown};
  GetHTTPStreamingResponseBodyData: {(/* Args Unknown */): unknown};
  ReleaseHTTPRequest: {(/* Args Unknown */): unknown};
  GetHTTPDownloadProgressPct: {(/* Args Unknown */): unknown};
  SetHTTPRequestRawPostBody: {(/* Args Unknown */): unknown};
  CreateCookieContainer: {(/* Args Unknown */): unknown};
  ReleaseCookieContainer: {(/* Args Unknown */): unknown};
  SetCookie: {(/* Args Unknown */): unknown};
  SetHTTPRequestCookieContainer: {(/* Args Unknown */): unknown};
  SetHTTPRequestUserAgentInfo: {(/* Args Unknown */): unknown};
  SetHTTPRequestRequiresVerifiedCertificate: {(/* Args Unknown */): unknown};
  SetHTTPRequestAbsoluteTimeoutMS: {(/* Args Unknown */): unknown};
  GetHTTPRequestWasTimedOut: {(/* Args Unknown */): unknown};
}
declare interface SteamController {
  Init: {(/* Args Unknown */): unknown};
  Shutdown: {(/* Args Unknown */): unknown};
  RunFrame: {(/* Args Unknown */): unknown};
  GetConnectedControllers: {(/* Args Unknown */): unknown};
  GetActionSetHandle: {(/* Args Unknown */): unknown};
  ActivateActionSet: {(/* Args Unknown */): unknown};
  GetCurrentActionSet: {(/* Args Unknown */): unknown};
  ActivateActionSetLayer: {(/* Args Unknown */): unknown};
  DeactivateActionSetLayer: {(/* Args Unknown */): unknown};
  DeactivateAllActionSetLayers: {(/* Args Unknown */): unknown};
  GetActiveActionSetLayers: {(/* Args Unknown */): unknown};
  GetDigitalActionHandle: {(/* Args Unknown */): unknown};
  GetDigitalActionData: {(/* Args Unknown */): unknown};
  GetDigitalActionOrigins: {(/* Args Unknown */): unknown};
  GetAnalogActionHandle: {(/* Args Unknown */): unknown};
  GetAnalogActionData: {(/* Args Unknown */): unknown};
  GetAnalogActionOrigins: {(/* Args Unknown */): unknown};
  GetGlyphForActionOrigin: {(/* Args Unknown */): unknown};
  GetStringForActionOrigin: {(/* Args Unknown */): unknown};
  StopAnalogActionMomentum: {(/* Args Unknown */): unknown};
  GetMotionData: {(/* Args Unknown */): unknown};
  TriggerHapticPulse: {(/* Args Unknown */): unknown};
  TriggerRepeatedHapticPulse: {(/* Args Unknown */): unknown};
  TriggerVibration: {(/* Args Unknown */): unknown};
  SetLEDColor: {(/* Args Unknown */): unknown};
  ShowBindingPanel: {(/* Args Unknown */): unknown};
  GetInputTypeForHandle: {(/* Args Unknown */): unknown};
  GetControllerForGamepadIndex: {(/* Args Unknown */): unknown};
  GetGamepadIndexForController: {(/* Args Unknown */): unknown};
  GetStringForXboxOrigin: {(/* Args Unknown */): unknown};
  GetGlyphForXboxOrigin: {(/* Args Unknown */): unknown};
  GetActionOriginFromXboxOrigin: {(/* Args Unknown */): unknown};
  TranslateActionOrigin: {(/* Args Unknown */): unknown};
  GetControllerBindingRevision: {(/* Args Unknown */): unknown};
}
declare interface SteamUGC {
  CreateQueryUserUGCRequest: {(/* Args Unknown */): unknown};
  CreateQueryAllUGCRequest: {(/* Args Unknown */): unknown};
  CreateQueryUGCDetailsRequest: {(/* Args Unknown */): unknown};
  SendQueryUGCRequest: {(handle: number): Promise<{ m_handle: number, m_eResult: SteamEnums.EResult, m_unNumResultsReturned: number, m_unTotalMatchingResults: number, m_bCachedData: boolean, m_rgchNextCursor: string }>};
  GetQueryUGCResult: {(/* Args Unknown */): unknown};
  GetQueryUGCNumTags: {(/* Args Unknown */): unknown};
  GetQueryUGCTag: {(/* Args Unknown */): unknown};
  GetQueryUGCTagDisplayName: {(/* Args Unknown */): unknown};
  GetQueryUGCPreviewURL: {(/* Args Unknown */): unknown};
  GetQueryUGCMetadata: {(/* Args Unknown */): unknown};
  GetQueryUGCChildren: {(/* Args Unknown */): unknown};
  GetQueryUGCStatistic: {(/* Args Unknown */): unknown};
  GetQueryUGCNumAdditionalPreviews: {(/* Args Unknown */): unknown};
  GetQueryUGCAdditionalPreview: {(/* Args Unknown */): unknown};
  GetQueryUGCNumKeyValueTags: {(/* Args Unknown */): unknown};
  GetQueryUGCKeyValueTag: {(/* Args Unknown */): unknown};
  ReleaseQueryUGCRequest: {(/* Args Unknown */): unknown};
  AddRequiredTag: {(/* Args Unknown */): unknown};
  AddRequiredTagGroup: {(/* Args Unknown */): unknown};
  AddExcludedTag: {(/* Args Unknown */): unknown};
  SetReturnOnlyIDs: {(/* Args Unknown */): unknown};
  SetReturnKeyValueTags: {(/* Args Unknown */): unknown};
  SetReturnLongDescription: {(/* Args Unknown */): unknown};
  SetReturnMetadata: {(/* Args Unknown */): unknown};
  SetReturnChildren: {(/* Args Unknown */): unknown};
  SetReturnAdditionalPreviews: {(/* Args Unknown */): unknown};
  SetReturnTotalOnly: {(/* Args Unknown */): unknown};
  SetReturnPlaytimeStats: {(/* Args Unknown */): unknown};
  SetLanguage: {(/* Args Unknown */): unknown};
  SetAllowCachedResponse: {(/* Args Unknown */): unknown};
  SetCloudFileNameFilter: {(/* Args Unknown */): unknown};
  SetMatchAnyTag: {(/* Args Unknown */): unknown};
  SetSearchText: {(/* Args Unknown */): unknown};
  SetRankedByTrendDays: {(/* Args Unknown */): unknown};
  SetTimeCreatedDateRange: {(/* Args Unknown */): unknown};
  SetTimeUpdatedDateRange: {(/* Args Unknown */): unknown};
  AddRequiredKeyValueTag: {(/* Args Unknown */): unknown};
  RequestUGCDetails: {(nPublishedFileID: number, unMaxAgeSeconds: number): Promise<{ m_details: SteamStructs.SteamUGCDetails_t, m_bCachedData: boolean }>};
  CreateItem: {(nConsumerAppId: number, eFileType: SteamEnums.EWorkshopFileType): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number, m_bUserNeedsToAcceptWorkshopLegalAgreement: boolean }>};
  StartItemUpdate: {(/* Args Unknown */): unknown};
  SetItemTitle: {(/* Args Unknown */): unknown};
  SetItemDescription: {(/* Args Unknown */): unknown};
  SetItemUpdateLanguage: {(/* Args Unknown */): unknown};
  SetItemMetadata: {(/* Args Unknown */): unknown};
  SetItemVisibility: {(/* Args Unknown */): unknown};
  SetItemTags: {(/* Args Unknown */): unknown};
  SetItemContent: {(/* Args Unknown */): unknown};
  SetItemPreview: {(/* Args Unknown */): unknown};
  SetAllowLegacyUpload: {(/* Args Unknown */): unknown};
  RemoveAllItemKeyValueTags: {(/* Args Unknown */): unknown};
  RemoveItemKeyValueTags: {(/* Args Unknown */): unknown};
  AddItemKeyValueTag: {(/* Args Unknown */): unknown};
  AddItemPreviewFile: {(/* Args Unknown */): unknown};
  AddItemPreviewVideo: {(/* Args Unknown */): unknown};
  UpdateItemPreviewFile: {(/* Args Unknown */): unknown};
  UpdateItemPreviewVideo: {(/* Args Unknown */): unknown};
  RemoveItemPreview: {(/* Args Unknown */): unknown};
  SubmitItemUpdate: {(handle: number, pchChangeNote: string): Promise<{ m_eResult: SteamEnums.EResult, m_bUserNeedsToAcceptWorkshopLegalAgreement: boolean, m_nPublishedFileId: number }>};
  GetItemUpdateProgress: {(/* Args Unknown */): unknown};
  SetUserItemVote: {(nPublishedFileID: number, bVoteUp: boolean): Promise<{ m_nPublishedFileId: number, m_eResult: SteamEnums.EResult, m_bVoteUp: boolean }>};
  GetUserItemVote: {(nPublishedFileID: number): Promise<{ m_nPublishedFileId: number, m_eResult: SteamEnums.EResult, m_bVotedUp: boolean, m_bVotedDown: boolean, m_bVoteSkipped: boolean }>};
  AddItemToFavorites: {(nAppId: number, nPublishedFileID: number): Promise<{ m_nPublishedFileId: number, m_eResult: SteamEnums.EResult, m_bWasAddRequest: boolean }>};
  RemoveItemFromFavorites: {(nAppId: number, nPublishedFileID: number): Promise<{ m_nPublishedFileId: number, m_eResult: SteamEnums.EResult, m_bWasAddRequest: boolean }>};
  SubscribeItem: {(nPublishedFileID: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number }>};
  UnsubscribeItem: {(nPublishedFileID: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number }>};
  GetNumSubscribedItems: {(/* Args Unknown */): unknown};
  GetSubscribedItems: {(/* Args Unknown */): unknown};
  GetItemState: {(/* Args Unknown */): unknown};
  GetItemInstallInfo: {(/* Args Unknown */): unknown};
  GetItemDownloadInfo: {(/* Args Unknown */): unknown};
  DownloadItem: {(/* Args Unknown */): unknown};
  BInitWorkshopForGameServer: {(/* Args Unknown */): unknown};
  SuspendDownloads: {(/* Args Unknown */): unknown};
  StartPlaytimeTracking: {(unNumPublishedFileIDs: number): Promise<{ m_eResult: SteamEnums.EResult }>};
  StopPlaytimeTracking: {(unNumPublishedFileIDs: number): Promise<{ m_eResult: SteamEnums.EResult }>};
  StopPlaytimeTrackingForAllItems: {(): Promise<{ m_eResult: SteamEnums.EResult }>};
  AddDependency: {(nParentPublishedFileID: number, nChildPublishedFileID: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number, m_nChildPublishedFileId: number }>};
  RemoveDependency: {(nParentPublishedFileID: number, nChildPublishedFileID: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number, m_nChildPublishedFileId: number }>};
  AddAppDependency: {(nPublishedFileID: number, nAppID: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number, m_nAppID: number }>};
  RemoveAppDependency: {(nPublishedFileID: number, nAppID: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number, m_nAppID: number }>};
  GetAppDependencies: {(nPublishedFileID: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number, m_rgAppIDs: unknown, m_nNumAppDependencies: number, m_nTotalNumAppDependencies: number }>};
  DeleteItem: {(nPublishedFileID: number): Promise<{ m_eResult: SteamEnums.EResult, m_nPublishedFileId: number }>};
  ShowWorkshopEULA: {(/* Args Unknown */): unknown};
  GetWorkshopEULAStatus: {(): Promise<{ m_eResult: SteamEnums.EResult, m_nAppID: number, m_unVersion: number, m_rtAction: number, m_bAccepted: boolean, m_bNeedsAction: boolean }>};
}
declare interface SteamAppList {
  GetNumInstalledApps: {(/* Args Unknown */): unknown};
  GetInstalledApps: {(/* Args Unknown */): unknown};
  GetAppName: {(/* Args Unknown */): unknown};
  GetAppInstallDir: {(/* Args Unknown */): unknown};
  GetAppBuildId: {(/* Args Unknown */): unknown};
}
declare interface SteamHTMLSurface {
  Init: {(/* Args Unknown */): unknown};
  Shutdown: {(/* Args Unknown */): unknown};
  CreateBrowser: {(pchUserAgent: string, pchUserCSS: string): Promise<{ unBrowserHandle: number }>};
  RemoveBrowser: {(/* Args Unknown */): unknown};
  LoadURL: {(/* Args Unknown */): unknown};
  SetSize: {(/* Args Unknown */): unknown};
  StopLoad: {(/* Args Unknown */): unknown};
  Reload: {(/* Args Unknown */): unknown};
  GoBack: {(/* Args Unknown */): unknown};
  GoForward: {(/* Args Unknown */): unknown};
  AddHeader: {(/* Args Unknown */): unknown};
  ExecuteJavascript: {(/* Args Unknown */): unknown};
  MouseUp: {(/* Args Unknown */): unknown};
  MouseDown: {(/* Args Unknown */): unknown};
  MouseDoubleClick: {(/* Args Unknown */): unknown};
  MouseMove: {(/* Args Unknown */): unknown};
  MouseWheel: {(/* Args Unknown */): unknown};
  KeyDown: {(/* Args Unknown */): unknown};
  KeyUp: {(/* Args Unknown */): unknown};
  KeyChar: {(/* Args Unknown */): unknown};
  SetHorizontalScroll: {(/* Args Unknown */): unknown};
  SetVerticalScroll: {(/* Args Unknown */): unknown};
  SetKeyFocus: {(/* Args Unknown */): unknown};
  ViewSource: {(/* Args Unknown */): unknown};
  CopyToClipboard: {(/* Args Unknown */): unknown};
  PasteFromClipboard: {(/* Args Unknown */): unknown};
  Find: {(/* Args Unknown */): unknown};
  StopFind: {(/* Args Unknown */): unknown};
  GetLinkAtPosition: {(/* Args Unknown */): unknown};
  SetCookie: {(/* Args Unknown */): unknown};
  SetPageScaleFactor: {(/* Args Unknown */): unknown};
  SetBackgroundMode: {(/* Args Unknown */): unknown};
  SetDPIScalingFactor: {(/* Args Unknown */): unknown};
  OpenDeveloperTools: {(/* Args Unknown */): unknown};
  AllowStartRequest: {(/* Args Unknown */): unknown};
  JSDialogResponse: {(/* Args Unknown */): unknown};
  FileLoadDialogResponse: {(/* Args Unknown */): unknown};
}
declare interface SteamInventory {
  GetResultStatus: {(/* Args Unknown */): unknown};
  GetResultItems: {(/* Args Unknown */): unknown};
  GetResultItemProperty: {(/* Args Unknown */): unknown};
  GetResultTimestamp: {(/* Args Unknown */): unknown};
  CheckResultSteamID: {(/* Args Unknown */): unknown};
  DestroyResult: {(/* Args Unknown */): unknown};
  GetAllItems: {(/* Args Unknown */): unknown};
  GetItemsByID: {(/* Args Unknown */): unknown};
  SerializeResult: {(/* Args Unknown */): unknown};
  DeserializeResult: {(/* Args Unknown */): unknown};
  GenerateItems: {(/* Args Unknown */): unknown};
  GrantPromoItems: {(/* Args Unknown */): unknown};
  AddPromoItem: {(/* Args Unknown */): unknown};
  AddPromoItems: {(/* Args Unknown */): unknown};
  ConsumeItem: {(/* Args Unknown */): unknown};
  ExchangeItems: {(/* Args Unknown */): unknown};
  TransferItemQuantity: {(/* Args Unknown */): unknown};
  SendItemDropHeartbeat: {(/* Args Unknown */): unknown};
  TriggerItemDrop: {(/* Args Unknown */): unknown};
  TradeItems: {(/* Args Unknown */): unknown};
  LoadItemDefinitions: {(/* Args Unknown */): unknown};
  GetItemDefinitionIDs: {(/* Args Unknown */): unknown};
  GetItemDefinitionProperty: {(/* Args Unknown */): unknown};
  RequestEligiblePromoItemDefinitionsIDs: {(steamID: unknown): Promise<{ m_result: SteamEnums.EResult, m_steamID: unknown, m_numEligiblePromoItemDefs: number, m_bCachedData: boolean }>};
  GetEligiblePromoItemDefinitionIDs: {(/* Args Unknown */): unknown};
  StartPurchase: {(pArrayItemDefs: unknown, punArrayQuantity: unknown, unArrayLength: number): Promise<{ m_result: SteamEnums.EResult, m_ulOrderID: number, m_ulTransID: number }>};
  RequestPrices: {(): Promise<{ m_result: SteamEnums.EResult, m_rgchCurrency: string }>};
  GetNumItemsWithPrices: {(/* Args Unknown */): unknown};
  GetItemsWithPrices: {(/* Args Unknown */): unknown};
  GetItemPrice: {(/* Args Unknown */): unknown};
  StartUpdateProperties: {(/* Args Unknown */): unknown};
  RemoveProperty: {(/* Args Unknown */): unknown};
  SetProperty: {(/* Args Unknown */): unknown};
  SubmitUpdateProperties: {(/* Args Unknown */): unknown};
  InspectItem: {(/* Args Unknown */): unknown};
}
declare interface SteamVideo {
  GetVideoURL: {(unVideoAppID: number): Promise<{ m_eResult: SteamEnums.EResult, m_unVideoAppID: number, m_rgchURL: string }>};
  IsBroadcasting: {(/* Args Unknown */): unknown};
  GetOPFSettings: {(unVideoAppID: number): Promise<{ m_eResult: SteamEnums.EResult, m_unVideoAppID: number }>};
  GetOPFStringForApp: {(/* Args Unknown */): unknown};
}
declare interface SteamParentalSettings {
  BIsParentalLockEnabled: {(/* Args Unknown */): unknown};
  BIsParentalLockLocked: {(/* Args Unknown */): unknown};
  BIsAppBlocked: {(/* Args Unknown */): unknown};
  BIsAppInBlockList: {(/* Args Unknown */): unknown};
  BIsFeatureBlocked: {(/* Args Unknown */): unknown};
  BIsFeatureInBlockList: {(/* Args Unknown */): unknown};
}
declare interface SteamInput {
  Init: {(/* Args Unknown */): unknown};
  Shutdown: {(/* Args Unknown */): unknown};
  SetInputActionManifestFilePath: {(/* Args Unknown */): unknown};
  RunFrame: {(/* Args Unknown */): unknown};
  BWaitForData: {(/* Args Unknown */): unknown};
  BNewDataAvailable: {(/* Args Unknown */): unknown};
  GetConnectedControllers: {(/* Args Unknown */): unknown};
  EnableDeviceCallbacks: {(/* Args Unknown */): unknown};
  EnableActionEventCallbacks: {(/* Args Unknown */): unknown};
  GetActionSetHandle: {(/* Args Unknown */): unknown};
  ActivateActionSet: {(/* Args Unknown */): unknown};
  GetCurrentActionSet: {(/* Args Unknown */): unknown};
  ActivateActionSetLayer: {(/* Args Unknown */): unknown};
  DeactivateActionSetLayer: {(/* Args Unknown */): unknown};
  DeactivateAllActionSetLayers: {(/* Args Unknown */): unknown};
  GetActiveActionSetLayers: {(/* Args Unknown */): unknown};
  GetDigitalActionHandle: {(/* Args Unknown */): unknown};
  GetDigitalActionData: {(/* Args Unknown */): unknown};
  GetDigitalActionOrigins: {(/* Args Unknown */): unknown};
  GetStringForDigitalActionName: {(/* Args Unknown */): unknown};
  GetAnalogActionHandle: {(/* Args Unknown */): unknown};
  GetAnalogActionData: {(/* Args Unknown */): unknown};
  GetAnalogActionOrigins: {(/* Args Unknown */): unknown};
  GetGlyphPNGForActionOrigin: {(/* Args Unknown */): unknown};
  GetGlyphSVGForActionOrigin: {(/* Args Unknown */): unknown};
  GetGlyphForActionOrigin_Legacy: {(/* Args Unknown */): unknown};
  GetStringForActionOrigin: {(/* Args Unknown */): unknown};
  GetStringForAnalogActionName: {(/* Args Unknown */): unknown};
  StopAnalogActionMomentum: {(/* Args Unknown */): unknown};
  GetMotionData: {(/* Args Unknown */): unknown};
  TriggerVibration: {(/* Args Unknown */): unknown};
  TriggerVibrationExtended: {(/* Args Unknown */): unknown};
  TriggerSimpleHapticEvent: {(/* Args Unknown */): unknown};
  SetLEDColor: {(/* Args Unknown */): unknown};
  Legacy_TriggerHapticPulse: {(/* Args Unknown */): unknown};
  Legacy_TriggerRepeatedHapticPulse: {(/* Args Unknown */): unknown};
  ShowBindingPanel: {(/* Args Unknown */): unknown};
  GetInputTypeForHandle: {(/* Args Unknown */): unknown};
  GetControllerForGamepadIndex: {(/* Args Unknown */): unknown};
  GetGamepadIndexForController: {(/* Args Unknown */): unknown};
  GetStringForXboxOrigin: {(/* Args Unknown */): unknown};
  GetGlyphForXboxOrigin: {(/* Args Unknown */): unknown};
  GetActionOriginFromXboxOrigin: {(/* Args Unknown */): unknown};
  TranslateActionOrigin: {(/* Args Unknown */): unknown};
  GetDeviceBindingRevision: {(/* Args Unknown */): unknown};
  GetRemotePlaySessionID: {(/* Args Unknown */): unknown};
  GetSessionInputConfigurationSettings: {(/* Args Unknown */): unknown};
}
declare interface SteamRemotePlay {
  GetSessionCount: {(/* Args Unknown */): unknown};
  GetSessionID: {(/* Args Unknown */): unknown};
  GetSessionSteamID: {(/* Args Unknown */): unknown};
  GetSessionClientName: {(/* Args Unknown */): unknown};
  GetSessionClientFormFactor: {(/* Args Unknown */): unknown};
  BGetSessionClientResolution: {(/* Args Unknown */): unknown};
  BSendRemotePlayTogetherInvite: {(/* Args Unknown */): unknown};
}
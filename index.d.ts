
import * as CallResults from './callResults';
import * as SteamEnums from './steamApiEnums';
import * as SteamStructs from './steamApiStructs';

declare class SteamWorks {
  constructor(appId: number);
  Init: {(appId: number): boolean};
  Shutdown: {(): boolean};
  GetApplicationRunning: {(): boolean};
  GetCallbackThreadRunning: {(): boolean};
  SteamAPI: steamapi;
  CallBacks: callbacks;
  Constants: constants;
  Structs: structs;
  Enums: enums;
  Uncategorized: uncategorized;
  SteamClient: steamclient;
  SteamUser: steamuser;
  SteamFriends: steamfriends;
  SteamUtils: steamutils;
  SteamMatchmaking: steammatchmaking;
  SteamMatchmakingServers: steammatchmakingservers;
  SteamGameSearch: steamgamesearch;
  SteamParties: steamparties;
  SteamUserStats: steamuserstats;
  SteamApps: steamapps;
  SteamNetworking: steamnetworking;
  SteamRemoteStorage: steamremotestorage;
  SteamScreenshots: steamscreenshots;
  SteamMusic: steammusic;
  SteamMusicRemote: steammusicremote;
  SteamHTTP: steamhttp;
  SteamController: steamcontroller;
  SteamUGC: steamugc;
  SteamAppList: steamapplist;
  SteamHTMLSurface: steamhtmlsurface;
  SteamInventory: steaminventory;
  SteamVideo: steamvideo;
  SteamParentalSettings: steamparentalsettings;
  SteamInput: steaminput;
  SteamRemotePlay: steamremoteplay;
}
export = SteamWorks;


interface steamapi {
  constructor(/* Args Unknown */);
  RunCallbacks: Function;
  GetHSteamPipe: Function;
  GetHSteamUser: Function;
  RegisterCallback: Function;
  UnregisterCallback: Function;
  RegisterCallResult: Function;
  UnregisterCallResult: Function;
  Init: Function;
  Shutdown: Function;
  RestartAppIfNecessary: Function;
  ReleaseCurrentThreadMemory: Function;
  WriteMiniDump: Function;
  SetMiniDumpComment: Function;
  IsSteamRunning: Function;
  GetSteamInstallPath: Function;
  SetTryCatchCallbacks: Function;
  ManualDispatch_Init: Function;
  ManualDispatch_RunFrame: Function;
  ManualDispatch_GetNextCallback: Function;
  ManualDispatch_FreeLastCallback: Function;
  ManualDispatch_GetAPICallResult: Function;
}
interface callbacks {
  constructor(/* Args Unknown */);
  GetVideoURL: Function;
  GetOPFSettings: Function;
}
interface constants {
  constructor(/* Args Unknown */);
  k_cubSaltSize: Number;
  k_GIDNil: Number;
  k_TxnIDNil: Number;
  k_TxnIDUnknown: Number;
  k_JobIDNil: Number;
  k_uPackageIdInvalid: Number;
  k_uBundleIdInvalid: Number;
  k_uPhysicalItemIdInvalid: Number;
  k_uDepotIdInvalid: Number;
  k_uCellIDInvalid: Number;
  k_uPartnerIdInvalid: Number;
  k_uManifestIdInvalid: Number;
  k_ulSiteIdInvalid: Number;
  k_ulPartyBeaconIdInvalid: Number;
  QUERY_PORT_NOT_INITIALIZED: Number;
  QUERY_PORT_ERROR: Number;
  k_iSteamBillingCallbacks: Number;
  k_iSteamContentServerCallbacks: Number;
  k_iClientFriendsCallbacks: Number;
  k_iClientUserCallbacks: Number;
  k_iSteamNetworkingCallbacks: Number;
  k_iSteamNetworkingSocketsCallbacks: Number;
  k_iSteamNetworkingMessagesCallbacks: Number;
  k_iSteamNetworkingUtilsCallbacks: Number;
  k_iClientRemoteStorageCallbacks: Number;
  k_iClientDepotBuilderCallbacks: Number;
  k_iClientUtilsCallbacks: Number;
  k_iSteamGameCoordinatorCallbacks: Number;
  k_iSteamGameStatsCallbacks: Number;
  k_iClientHTTPCallbacks: Number;
  k_iClientScreenshotsCallbacks: Number;
  k_iSteamScreenshotsCallbacks: Number;
  k_iClientUnifiedMessagesCallbacks: Number;
  k_iSteamStreamLauncherCallbacks: Number;
  k_iClientControllerCallbacks: Number;
  k_iSteamControllerCallbacks: Number;
  k_iClientParentalSettingsCallbacks: Number;
  k_iClientNetworkDeviceManagerCallbacks: Number;
  k_iClientMusicCallbacks: Number;
  k_iClientRemoteClientManagerCallbacks: Number;
  k_iClientUGCCallbacks: Number;
  k_iSteamStreamClientCallbacks: Number;
  k_IClientProductBuilderCallbacks: Number;
  k_iClientShortcutsCallbacks: Number;
  k_iClientRemoteControlManagerCallbacks: Number;
  k_iSteamMusicCallbacks: Number;
  k_iSteamMusicRemoteCallbacks: Number;
  k_iClientVRCallbacks: Number;
  k_iClientGameNotificationCallbacks: Number;
  k_iSteamGameNotificationCallbacks: Number;
  k_iClientVideoCallbacks: Number;
  k_iClientInventoryCallbacks: Number;
  k_iClientBluetoothManagerCallbacks: Number;
  k_iClientSharedConnectionCallbacks: Number;
  k_ISteamParentalSettingsCallbacks: Number;
  k_iClientShaderCallbacks: Number;
  k_iSteamGameSearchCallbacks: Number;
  k_iClientPartiesCallbacks: Number;
  k_iSteamRemotePlayCallbacks: Number;
  k_iClientCompatCallbacks: Number;
  k_iSteamChatCallbacks: Number;
  STEAMCLIENT_INTERFACE_VERSION: String;
  STEAMUSER_INTERFACE_VERSION: String;
  k_cchMaxFriendsGroupName: Number;
  k_cFriendsGroupLimit: Number;
  k_FriendsGroupID_Invalid: Number;
  k_cchPersonaNameMax: Number;
  k_cwchPersonaNameMax: Number;
  k_nUserRestrictionNone: Number;
  k_nUserRestrictionUnknown: Number;
  k_nUserRestrictionVoiceChat: Number;
  k_nUserRestrictionGroupChat: Number;
  k_nUserRestrictionRating: Number;
  k_nUserRestrictionGameInvites: Number;
  k_nUserRestrictionTrading: Number;
  k_cubChatMetadataMax: Number;
  k_cchMaxRichPresenceKeys: Number;
  k_cchMaxRichPresenceKeyLength: Number;
  k_cchMaxRichPresenceValueLength: Number;
  STEAMFRIENDS_INTERFACE_VERSION: String;
  STEAMUTILS_INTERFACE_VERSION: String;
  k_nMaxLobbyKeyLength: Number;
  STEAMMATCHMAKING_INTERFACE_VERSION: String;
  HSERVERQUERY_INVALID: Number;
  STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION: String;
  k_unFavoriteFlagNone: Number;
  k_unFavoriteFlagFavorite: Number;
  k_unFavoriteFlagHistory: Number;
  STEAMGAMESEARCH_INTERFACE_VERSION: String;
  STEAMPARTIES_INTERFACE_VERSION: String;
  k_cchStatNameMax: Number;
  k_cchLeaderboardNameMax: Number;
  k_cLeaderboardDetailsMax: Number;
  STEAMUSERSTATS_INTERFACE_VERSION: String;
  STEAMAPPS_INTERFACE_VERSION: String;
  STEAMNETWORKING_INTERFACE_VERSION: String;
  k_unMaxCloudFileChunkSize: Number;
  k_PublishedFileIdInvalid: Number;
  k_UGCHandleInvalid: Number;
  k_PublishedFileUpdateHandleInvalid: Number;
  k_UGCFileStreamHandleInvalid: Number;
  k_cchPublishedDocumentTitleMax: Number;
  k_cchPublishedDocumentDescriptionMax: Number;
  k_cchPublishedDocumentChangeDescriptionMax: Number;
  k_cchTagListMax: Number;
  k_cchFilenameMax: Number;
  k_cchPublishedFileURLMax: Number;
  STEAMREMOTESTORAGE_INTERFACE_VERSION: String;
  k_nScreenshotMaxTaggedUsers: Number;
  k_nScreenshotMaxTaggedPublishedFiles: Number;
  k_cubUFSTagTypeMax: Number;
  k_cubUFSTagValueMax: Number;
  k_ScreenshotThumbWidth: Number;
  INVALID_SCREENSHOT_HANDLE: Number;
  STEAMSCREENSHOTS_INTERFACE_VERSION: String;
  STEAMMUSIC_INTERFACE_VERSION: String;
  k_SteamMusicNameMaxLength: Number;
  k_SteamMusicPNGMaxLength: Number;
  STEAMMUSICREMOTE_INTERFACE_VERSION: String;
  INVALID_HTTPREQUEST_HANDLE: Number;
  INVALID_HTTPCOOKIE_HANDLE: Number;
  STEAMHTTP_INTERFACE_VERSION: String;
  STEAM_CONTROLLER_MAX_COUNT: Number;
  STEAM_CONTROLLER_MAX_ANALOG_ACTIONS: Number;
  STEAM_CONTROLLER_MAX_DIGITAL_ACTIONS: Number;
  STEAM_CONTROLLER_MAX_ORIGINS: Number;
  STEAM_CONTROLLER_MAX_ACTIVE_LAYERS: Number;
  STEAM_CONTROLLER_MIN_ANALOG_ACTION_DATA: Number;
  STEAM_CONTROLLER_MAX_ANALOG_ACTION_DATA: Number;
  STEAMCONTROLLER_INTERFACE_VERSION: String;
  k_UGCQueryHandleInvalid: Number;
  k_UGCUpdateHandleInvalid: Number;
  kNumUGCResultsPerPage: Number;
  k_cchDeveloperMetadataMax: Number;
  STEAMUGC_INTERFACE_VERSION: String;
  STEAMAPPLIST_INTERFACE_VERSION: String;
  INVALID_HTMLBROWSER: Number;
  STEAMHTMLSURFACE_INTERFACE_VERSION: String;
  k_SteamItemInstanceIDInvalid: Number;
  STEAMINVENTORY_INTERFACE_VERSION: String;
  STEAMVIDEO_INTERFACE_VERSION: String;
  STEAMPARENTALSETTINGS_INTERFACE_VERSION: String;
  STEAM_INPUT_MAX_COUNT: Number;
  STEAM_INPUT_MAX_ANALOG_ACTIONS: Number;
  STEAM_INPUT_MAX_DIGITAL_ACTIONS: Number;
  STEAM_INPUT_MAX_ORIGINS: Number;
  STEAM_INPUT_MAX_ACTIVE_LAYERS: Number;
  STEAM_INPUT_MIN_ANALOG_ACTION_DATA: Number;
  STEAM_INPUT_MAX_ANALOG_ACTION_DATA: Number;
  STEAMINPUT_INTERFACE_VERSION: String;
  STEAMREMOTEPLAY_INTERFACE_VERSION: String;
  STEAMNETWORKINGMESSAGES_INTERFACE_VERSION: String;
  STEAMNETWORKINGSOCKETS_INTERFACE_VERSION: String;
  STEAMNETWORKINGUTILS_INTERFACE_VERSION: String;
  STEAMGAMESERVER_INTERFACE_VERSION: String;
  STEAMGAMESERVERSTATS_INTERFACE_VERSION: String;
  STEAMAPPTICKET_INTERFACE_VERSION: String;
  STEAMGAMECOORDINATOR_INTERFACE_VERSION: String;
  STEAMMATCHMAKINGSERVERLISTRESPONSE_INTERFACE_VERSION: String;
  STEAMMATCHMAKINGPINGRESPONSE_INTERFACE_VERSION: String;
  STEAMMATCHMAKINGPLAYERSRESPONSE_INTERFACE_VERSION: String;
  STEAMMATCHMAKINGRULESRESPONSE_INTERFACE_VERSION: String;
  STEAMNETWORKINGCONNECTIONSIGNALING_INTERFACE_VERSION: String;
  STEAMNETWORKINGSIGNALINGRECVCONTEXT_INTERFACE_VERSION: String;
}
interface structs {
  constructor(/* Args Unknown */);
  SteamIPAddress_t: Function;
  FriendGameInfo_t: Function;
  SteamPartyBeaconLocation_t: Function;
  LeaderboardEntry_t: Function;
  P2PSessionState_t: Function;
  SteamParamStringArray_t: Function;
  SteamUGCDetails_t: Function;
  SteamItemDetails_t: Function;
  InputAnalogActionData_t: Function;
  InputDigitalActionData_t: Function;
  InputMotionData_t: Function;
  SteamNetworkingIdentityRender: Function;
  SteamNetworkingIPAddrRender: Function;
}
interface enums {
  constructor(/* Args Unknown */);
  undefined: Object;
  ESteamIPType: Object;
  EResult: Object;
  EVoiceResult: Object;
  EBeginAuthSessionResult: Object;
  EAuthSessionResponse: Object;
  EAccountType: Object;
  EAppReleaseState: Object;
  EAppOwnershipFlags: Object;
  EAppType: Object;
  ESteamUserStatType: Object;
  EChatEntryType: Object;
  EChatRoomEnterResponse: Object;
  EMarketingMessageFlags: Object;
  EBroadcastUploadResult: Object;
  ELaunchOptionType: Object;
  EVRHMDType: Object;
  EDurationControlProgress: Object;
  EDurationControlNotification: Object;
  EDurationControlOnlineState: Object;
  ESteamIPv6ConnectivityProtocol: Object;
  ESteamIPv6ConnectivityState: Object;
  EFriendRelationship: Object;
  EPersonaState: Object;
  EOverlayToStoreFlag: Object;
  EActivateGameOverlayToWebPageMode: Object;
  EPersonaChange: Object;
  ESteamAPICallFailure: Object;
  EGamepadTextInputMode: Object;
  EGamepadTextInputLineMode: Object;
  ETextFilteringContext: Object;
  ECheckFileSignature: Object;
  ELobbyType: Object;
  ELobbyComparison: Object;
  ELobbyDistanceFilter: Object;
  EChatMemberStateChange: Object;
  ESteamPartyBeaconLocationType: Object;
  ESteamPartyBeaconLocationData: Object;
  ELeaderboardDataRequest: Object;
  ELeaderboardSortMethod: Object;
  ELeaderboardDisplayType: Object;
  ELeaderboardUploadScoreMethod: Object;
  ERegisterActivationCodeResult: Object;
  EP2PSessionError: Object;
  EP2PSend: Object;
  ESNetSocketState: Object;
  ESNetSocketConnectionType: Object;
  ERemoteStoragePlatform: Object;
  ERemoteStoragePublishedFileVisibility: Object;
  EWorkshopFileType: Object;
  EWorkshopVote: Object;
  EWorkshopFileAction: Object;
  EWorkshopEnumerationType: Object;
  EWorkshopVideoProvider: Object;
  EVRScreenshotType: Object;
  ESteamControllerPad: Object;
  EControllerActionOrigin: Object;
  EXboxOrigin: Object;
  ESteamInputType: Object;
  ESteamControllerLEDFlag: Object;
  EUGCMatchingUGCType: Object;
  EUserUGCList: Object;
  EUGCQuery: Object;
  EItemUpdateStatus: Object;
  EItemState: Object;
  EItemStatistic: Object;
  EItemPreviewType: Object;
  EInputSourceMode: Object;
  EInputActionOrigin: Object;
  ESteamInputLEDFlag: Object;
  ESteamDeviceFormFactor: Object;
}
interface uncategorized {
  constructor(/* Args Unknown */);
  BIsVRLaunchOptionType: Function;
  BIsLaunchOptionTypeExemptFromGameTheater: Function;
  BIsOculusHMD: Function;
  BIsWindowsMRHeadset: Function;
  BIsHuaweiHeadset: Function;
  BIsViveHMD: Function;
  SteamAppTicket: Function;
  SteamGameCoordinator: Function;
  SteamNetworkingConnectionSignaling: Function;
  SteamNetworkingSignalingRecvContext: Function;
  CSteamID: Function;
  CGameID: Function;
  ValvePackingSentinel_t: Function;
  CCallbackBase: Function;
  CallbackMsg_t: Function;
  CSteamAPIContext: Function;
  ControllerAnalogActionData_t: Function;
  ControllerDigitalActionData_t: Function;
  ControllerMotionData_t: Function;
  CGetVideoURLResult: Function;
  CGetOPFSettingsResult: Function;
}
interface steamclient {
  constructor(/* Args Unknown */);
  CreateSteamPipe: {(/* Args Unknown */): unknown};
  BReleaseSteamPipe: {(/* Args Unknown */): unknown};
  ConnectToGlobalUser: {(/* Args Unknown */): unknown};
  CreateLocalUser: {(/* Args Unknown */): unknown};
  ReleaseUser: {(/* Args Unknown */): unknown};
  GetISteamUser: {(/* Args Unknown */): unknown};
  GetISteamGameServer: {(/* Args Unknown */): unknown};
  SetLocalIPBinding: {(/* Args Unknown */): unknown};
  GetISteamFriends: {(/* Args Unknown */): unknown};
  GetISteamUtils: {(/* Args Unknown */): unknown};
  GetISteamMatchmaking: {(/* Args Unknown */): unknown};
  GetISteamMatchmakingServers: {(/* Args Unknown */): unknown};
  GetISteamGenericInterface: {(/* Args Unknown */): unknown};
  GetISteamUserStats: {(/* Args Unknown */): unknown};
  GetISteamGameServerStats: {(/* Args Unknown */): unknown};
  GetISteamApps: {(/* Args Unknown */): unknown};
  GetISteamNetworking: {(/* Args Unknown */): unknown};
  GetISteamRemoteStorage: {(/* Args Unknown */): unknown};
  GetISteamScreenshots: {(/* Args Unknown */): unknown};
  GetISteamGameSearch: {(/* Args Unknown */): unknown};
  GetIPCCallCount: {(/* Args Unknown */): unknown};
  SetWarningMessageHook: {(/* Args Unknown */): unknown};
  BShutdownIfAllPipesClosed: {(/* Args Unknown */): unknown};
  GetISteamHTTP: {(/* Args Unknown */): unknown};
  GetISteamController: {(/* Args Unknown */): unknown};
  GetISteamUGC: {(/* Args Unknown */): unknown};
  GetISteamAppList: {(/* Args Unknown */): unknown};
  GetISteamMusic: {(/* Args Unknown */): unknown};
  GetISteamMusicRemote: {(/* Args Unknown */): unknown};
  GetISteamHTMLSurface: {(/* Args Unknown */): unknown};
  GetISteamInventory: {(/* Args Unknown */): unknown};
  GetISteamVideo: {(/* Args Unknown */): unknown};
  GetISteamParentalSettings: {(/* Args Unknown */): unknown};
  GetISteamInput: {(/* Args Unknown */): unknown};
  GetISteamParties: {(/* Args Unknown */): unknown};
  GetISteamRemotePlay: {(/* Args Unknown */): unknown};
}
interface steamuser {
  constructor(/* Args Unknown */);
  GetHSteamUser: {(/* Args Unknown */): unknown};
  BLoggedOn: {(/* Args Unknown */): unknown};
  GetSteamID: {(/* Args Unknown */): unknown};
  InitiateGameConnection: {(/* Args Unknown */): unknown};
  TerminateGameConnection: {(/* Args Unknown */): unknown};
  TrackAppUsageEvent: {(/* Args Unknown */): unknown};
  GetUserDataFolder: {(/* Args Unknown */): unknown};
  StartVoiceRecording: {(/* Args Unknown */): unknown};
  StopVoiceRecording: {(/* Args Unknown */): unknown};
  GetAvailableVoice: {(/* Args Unknown */): unknown};
  GetVoice: {(/* Args Unknown */): unknown};
  DecompressVoice: {(/* Args Unknown */): unknown};
  GetVoiceOptimalSampleRate: {(/* Args Unknown */): unknown};
  GetAuthSessionTicket: {(/* Args Unknown */): unknown};
  BeginAuthSession: {(/* Args Unknown */): unknown};
  EndAuthSession: {(/* Args Unknown */): unknown};
  CancelAuthTicket: {(/* Args Unknown */): unknown};
  UserHasLicenseForApp: {(/* Args Unknown */): unknown};
  BIsBehindNAT: {(/* Args Unknown */): unknown};
  AdvertiseGame: {(/* Args Unknown */): unknown};
  RequestEncryptedAppTicket: {(/* Args Unknown */): unknown};
  GetEncryptedAppTicket: {(/* Args Unknown */): unknown};
  GetGameBadgeLevel: {(/* Args Unknown */): unknown};
  GetPlayerSteamLevel: {(/* Args Unknown */): unknown};
  RequestStoreAuthURL: {(/* Args Unknown */): unknown};
  BIsPhoneVerified: {(/* Args Unknown */): unknown};
  BIsTwoFactorEnabled: {(/* Args Unknown */): unknown};
  BIsPhoneIdentifying: {(/* Args Unknown */): unknown};
  BIsPhoneRequiringVerification: {(/* Args Unknown */): unknown};
  GetMarketEligibility: {(/* Args Unknown */): unknown};
  GetDurationControl: {(/* Args Unknown */): unknown};
  BSetDurationControlOnlineState: {(/* Args Unknown */): unknown};
  RequestEncryptedAppTicket: {(/* Args Unknown */): Promise<unknown>};
  RequestStoreAuthURL: {(/* Args Unknown */): Promise<unknown>};
  GetMarketEligibility: {(/* Args Unknown */): Promise<unknown>};
  GetDurationControl: {(/* Args Unknown */): Promise<unknown>};
}
interface steamfriends {
  constructor(/* Args Unknown */);
  GetPersonaName: {(/* Args Unknown */): unknown};
  SetPersonaName: {(/* Args Unknown */): unknown};
  GetPersonaState: {(/* Args Unknown */): unknown};
  GetFriendCount: {(/* Args Unknown */): unknown};
  GetFriendByIndex: {(/* Args Unknown */): unknown};
  GetFriendRelationship: {(/* Args Unknown */): unknown};
  GetFriendPersonaState: {(/* Args Unknown */): unknown};
  GetFriendPersonaName: {(/* Args Unknown */): unknown};
  GetFriendGamePlayed: {(/* Args Unknown */): unknown};
  GetFriendPersonaNameHistory: {(/* Args Unknown */): unknown};
  GetFriendSteamLevel: {(/* Args Unknown */): unknown};
  GetPlayerNickname: {(/* Args Unknown */): unknown};
  GetFriendsGroupCount: {(/* Args Unknown */): unknown};
  GetFriendsGroupIDByIndex: {(/* Args Unknown */): unknown};
  GetFriendsGroupName: {(/* Args Unknown */): unknown};
  GetFriendsGroupMembersCount: {(/* Args Unknown */): unknown};
  GetFriendsGroupMembersList: {(/* Args Unknown */): unknown};
  HasFriend: {(/* Args Unknown */): unknown};
  GetClanCount: {(/* Args Unknown */): unknown};
  GetClanByIndex: {(/* Args Unknown */): unknown};
  GetClanName: {(/* Args Unknown */): unknown};
  GetClanTag: {(/* Args Unknown */): unknown};
  GetClanActivityCounts: {(/* Args Unknown */): unknown};
  DownloadClanActivityCounts: {(/* Args Unknown */): unknown};
  GetFriendCountFromSource: {(/* Args Unknown */): unknown};
  GetFriendFromSourceByIndex: {(/* Args Unknown */): unknown};
  IsUserInSource: {(/* Args Unknown */): unknown};
  SetInGameVoiceSpeaking: {(/* Args Unknown */): unknown};
  ActivateGameOverlay: {(/* Args Unknown */): unknown};
  ActivateGameOverlayToUser: {(/* Args Unknown */): unknown};
  ActivateGameOverlayToWebPage: {(/* Args Unknown */): unknown};
  ActivateGameOverlayToStore: {(/* Args Unknown */): unknown};
  SetPlayedWith: {(/* Args Unknown */): unknown};
  ActivateGameOverlayInviteDialog: {(/* Args Unknown */): unknown};
  GetSmallFriendAvatar: {(/* Args Unknown */): unknown};
  GetMediumFriendAvatar: {(/* Args Unknown */): unknown};
  GetLargeFriendAvatar: {(/* Args Unknown */): unknown};
  RequestUserInformation: {(/* Args Unknown */): unknown};
  RequestClanOfficerList: {(/* Args Unknown */): unknown};
  GetClanOwner: {(/* Args Unknown */): unknown};
  GetClanOfficerCount: {(/* Args Unknown */): unknown};
  GetClanOfficerByIndex: {(/* Args Unknown */): unknown};
  GetUserRestrictions: {(/* Args Unknown */): unknown};
  SetRichPresence: {(/* Args Unknown */): unknown};
  ClearRichPresence: {(/* Args Unknown */): unknown};
  GetFriendRichPresence: {(/* Args Unknown */): unknown};
  GetFriendRichPresenceKeyCount: {(/* Args Unknown */): unknown};
  GetFriendRichPresenceKeyByIndex: {(/* Args Unknown */): unknown};
  RequestFriendRichPresence: {(/* Args Unknown */): unknown};
  InviteUserToGame: {(/* Args Unknown */): unknown};
  GetCoplayFriendCount: {(/* Args Unknown */): unknown};
  GetCoplayFriend: {(/* Args Unknown */): unknown};
  GetFriendCoplayTime: {(/* Args Unknown */): unknown};
  GetFriendCoplayGame: {(/* Args Unknown */): unknown};
  JoinClanChatRoom: {(/* Args Unknown */): unknown};
  LeaveClanChatRoom: {(/* Args Unknown */): unknown};
  GetClanChatMemberCount: {(/* Args Unknown */): unknown};
  GetChatMemberByIndex: {(/* Args Unknown */): unknown};
  SendClanChatMessage: {(/* Args Unknown */): unknown};
  GetClanChatMessage: {(/* Args Unknown */): unknown};
  IsClanChatAdmin: {(/* Args Unknown */): unknown};
  IsClanChatWindowOpenInSteam: {(/* Args Unknown */): unknown};
  OpenClanChatWindowInSteam: {(/* Args Unknown */): unknown};
  CloseClanChatWindowInSteam: {(/* Args Unknown */): unknown};
  SetListenForFriendsMessages: {(/* Args Unknown */): unknown};
  ReplyToFriendMessage: {(/* Args Unknown */): unknown};
  GetFriendMessage: {(/* Args Unknown */): unknown};
  GetFollowerCount: {(/* Args Unknown */): unknown};
  IsFollowing: {(/* Args Unknown */): unknown};
  EnumerateFollowingList: {(/* Args Unknown */): unknown};
  IsClanPublic: {(/* Args Unknown */): unknown};
  IsClanOfficialGameGroup: {(/* Args Unknown */): unknown};
  GetNumChatsWithUnreadPriorityMessages: {(/* Args Unknown */): unknown};
  ActivateGameOverlayRemotePlayTogetherInviteDialog: {(/* Args Unknown */): unknown};
  RegisterProtocolInOverlayBrowser: {(/* Args Unknown */): unknown};
  ActivateGameOverlayInviteDialogConnectString: {(/* Args Unknown */): unknown};
  SetPersonaName: {(/* Args Unknown */): Promise<unknown>};
  DownloadClanActivityCounts: {(/* Args Unknown */): Promise<unknown>};
  RequestClanOfficerList: {(/* Args Unknown */): Promise<unknown>};
  JoinClanChatRoom: {(/* Args Unknown */): Promise<unknown>};
  GetFollowerCount: {(/* Args Unknown */): Promise<unknown>};
  IsFollowing: {(/* Args Unknown */): Promise<unknown>};
  EnumerateFollowingList: {(/* Args Unknown */): Promise<unknown>};
}
interface steamutils {
  constructor(/* Args Unknown */);
  GetSecondsSinceAppActive: {(/* Args Unknown */): unknown};
  GetSecondsSinceComputerActive: {(/* Args Unknown */): unknown};
  GetConnectedUniverse: {(/* Args Unknown */): unknown};
  GetServerRealTime: {(/* Args Unknown */): unknown};
  GetIPCountry: {(/* Args Unknown */): unknown};
  GetImageSize: {(/* Args Unknown */): unknown};
  GetImageRGBA: {(/* Args Unknown */): unknown};
  GetCurrentBatteryPower: {(/* Args Unknown */): unknown};
  GetAppID: {(/* Args Unknown */): unknown};
  SetOverlayNotificationPosition: {(/* Args Unknown */): unknown};
  IsAPICallCompleted: {(/* Args Unknown */): unknown};
  GetAPICallFailureReason: {(/* Args Unknown */): unknown};
  GetAPICallResult: {(/* Args Unknown */): unknown};
  GetIPCCallCount: {(/* Args Unknown */): unknown};
  SetWarningMessageHook: {(/* Args Unknown */): unknown};
  IsOverlayEnabled: {(/* Args Unknown */): unknown};
  BOverlayNeedsPresent: {(/* Args Unknown */): unknown};
  CheckFileSignature: {(/* Args Unknown */): unknown};
  ShowGamepadTextInput: {(/* Args Unknown */): unknown};
  GetEnteredGamepadTextLength: {(/* Args Unknown */): unknown};
  GetEnteredGamepadTextInput: {(/* Args Unknown */): unknown};
  GetSteamUILanguage: {(/* Args Unknown */): unknown};
  IsSteamRunningInVR: {(/* Args Unknown */): unknown};
  SetOverlayNotificationInset: {(/* Args Unknown */): unknown};
  IsSteamInBigPictureMode: {(/* Args Unknown */): unknown};
  StartVRDashboard: {(/* Args Unknown */): unknown};
  IsVRHeadsetStreamingEnabled: {(/* Args Unknown */): unknown};
  SetVRHeadsetStreamingEnabled: {(/* Args Unknown */): unknown};
  IsSteamChinaLauncher: {(/* Args Unknown */): unknown};
  InitFilterText: {(/* Args Unknown */): unknown};
  FilterText: {(/* Args Unknown */): unknown};
  GetIPv6ConnectivityState: {(/* Args Unknown */): unknown};
  CheckFileSignature: {(/* Args Unknown */): Promise<unknown>};
}
interface steammatchmaking {
  constructor(/* Args Unknown */);
  GetFavoriteGameCount: {(/* Args Unknown */): unknown};
  GetFavoriteGame: {(/* Args Unknown */): unknown};
  AddFavoriteGame: {(/* Args Unknown */): unknown};
  RemoveFavoriteGame: {(/* Args Unknown */): unknown};
  RequestLobbyList: {(/* Args Unknown */): unknown};
  AddRequestLobbyListStringFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListNumericalFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListNearValueFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListFilterSlotsAvailable: {(/* Args Unknown */): unknown};
  AddRequestLobbyListDistanceFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListResultCountFilter: {(/* Args Unknown */): unknown};
  AddRequestLobbyListCompatibleMembersFilter: {(/* Args Unknown */): unknown};
  GetLobbyByIndex: {(/* Args Unknown */): unknown};
  CreateLobby: {(/* Args Unknown */): unknown};
  JoinLobby: {(/* Args Unknown */): unknown};
  LeaveLobby: {(/* Args Unknown */): unknown};
  InviteUserToLobby: {(/* Args Unknown */): unknown};
  GetNumLobbyMembers: {(/* Args Unknown */): unknown};
  GetLobbyMemberByIndex: {(/* Args Unknown */): unknown};
  GetLobbyData: {(/* Args Unknown */): unknown};
  SetLobbyData: {(/* Args Unknown */): unknown};
  GetLobbyDataCount: {(/* Args Unknown */): unknown};
  GetLobbyDataByIndex: {(/* Args Unknown */): unknown};
  DeleteLobbyData: {(/* Args Unknown */): unknown};
  GetLobbyMemberData: {(/* Args Unknown */): unknown};
  SetLobbyMemberData: {(/* Args Unknown */): unknown};
  SendLobbyChatMsg: {(/* Args Unknown */): unknown};
  GetLobbyChatEntry: {(/* Args Unknown */): unknown};
  RequestLobbyData: {(/* Args Unknown */): unknown};
  SetLobbyGameServer: {(/* Args Unknown */): unknown};
  GetLobbyGameServer: {(/* Args Unknown */): unknown};
  SetLobbyMemberLimit: {(/* Args Unknown */): unknown};
  GetLobbyMemberLimit: {(/* Args Unknown */): unknown};
  SetLobbyType: {(/* Args Unknown */): unknown};
  SetLobbyJoinable: {(/* Args Unknown */): unknown};
  GetLobbyOwner: {(/* Args Unknown */): unknown};
  SetLobbyOwner: {(/* Args Unknown */): unknown};
  SetLinkedLobby: {(/* Args Unknown */): unknown};
  RequestLobbyList: {(/* Args Unknown */): Promise<unknown>};
  CreateLobby: {(/* Args Unknown */): Promise<unknown>};
  JoinLobby: {(/* Args Unknown */): Promise<unknown>};
}
interface steammatchmakingservers {
  constructor(/* Args Unknown */);
  RequestInternetServerList: {(/* Args Unknown */): unknown};
  RequestLANServerList: {(/* Args Unknown */): unknown};
  RequestFriendsServerList: {(/* Args Unknown */): unknown};
  RequestFavoritesServerList: {(/* Args Unknown */): unknown};
  RequestHistoryServerList: {(/* Args Unknown */): unknown};
  RequestSpectatorServerList: {(/* Args Unknown */): unknown};
  ReleaseRequest: {(/* Args Unknown */): unknown};
  GetServerDetails: {(/* Args Unknown */): unknown};
  CancelQuery: {(/* Args Unknown */): unknown};
  RefreshQuery: {(/* Args Unknown */): unknown};
  IsRefreshing: {(/* Args Unknown */): unknown};
  GetServerCount: {(/* Args Unknown */): unknown};
  RefreshServer: {(/* Args Unknown */): unknown};
  PingServer: {(/* Args Unknown */): unknown};
  PlayerDetails: {(/* Args Unknown */): unknown};
  ServerRules: {(/* Args Unknown */): unknown};
  CancelServerQuery: {(/* Args Unknown */): unknown};
}
interface steamgamesearch {
  constructor(/* Args Unknown */);
  AddGameSearchParams: {(/* Args Unknown */): unknown};
  SearchForGameWithLobby: {(/* Args Unknown */): unknown};
  SearchForGameSolo: {(/* Args Unknown */): unknown};
  AcceptGame: {(/* Args Unknown */): unknown};
  DeclineGame: {(/* Args Unknown */): unknown};
  RetrieveConnectionDetails: {(/* Args Unknown */): unknown};
  EndGameSearch: {(/* Args Unknown */): unknown};
  SetGameHostParams: {(/* Args Unknown */): unknown};
  SetConnectionDetails: {(/* Args Unknown */): unknown};
  RequestPlayersForGame: {(/* Args Unknown */): unknown};
  HostConfirmGameStart: {(/* Args Unknown */): unknown};
  CancelRequestPlayersForGame: {(/* Args Unknown */): unknown};
  SubmitPlayerResult: {(/* Args Unknown */): unknown};
  EndGame: {(/* Args Unknown */): unknown};
}
interface steamparties {
  constructor(/* Args Unknown */);
  GetNumActiveBeacons: {(/* Args Unknown */): unknown};
  GetBeaconByIndex: {(/* Args Unknown */): unknown};
  GetBeaconDetails: {(/* Args Unknown */): unknown};
  JoinParty: {(/* Args Unknown */): unknown};
  GetNumAvailableBeaconLocations: {(/* Args Unknown */): unknown};
  GetAvailableBeaconLocations: {(/* Args Unknown */): unknown};
  CreateBeacon: {(/* Args Unknown */): unknown};
  OnReservationCompleted: {(/* Args Unknown */): unknown};
  CancelReservation: {(/* Args Unknown */): unknown};
  ChangeNumOpenSlots: {(/* Args Unknown */): unknown};
  DestroyBeacon: {(/* Args Unknown */): unknown};
  GetBeaconLocationData: {(/* Args Unknown */): unknown};
  JoinParty: {(/* Args Unknown */): Promise<unknown>};
  CreateBeacon: {(/* Args Unknown */): Promise<unknown>};
  ChangeNumOpenSlots: {(/* Args Unknown */): Promise<unknown>};
}
interface steamuserstats {
  constructor(/* Args Unknown */);
  RequestCurrentStats: {(/* Args Unknown */): unknown};
  GetStat: {(/* Args Unknown */): unknown};
  SetStat: {(/* Args Unknown */): unknown};
  UpdateAvgRateStat: {(/* Args Unknown */): unknown};
  GetAchievement: {(/* Args Unknown */): unknown};
  SetAchievement: {(/* Args Unknown */): unknown};
  ClearAchievement: {(/* Args Unknown */): unknown};
  GetAchievementAndUnlockTime: {(/* Args Unknown */): unknown};
  StoreStats: {(/* Args Unknown */): unknown};
  GetAchievementIcon: {(/* Args Unknown */): unknown};
  GetAchievementDisplayAttribute: {(/* Args Unknown */): unknown};
  IndicateAchievementProgress: {(/* Args Unknown */): unknown};
  GetNumAchievements: {(/* Args Unknown */): unknown};
  GetAchievementName: {(/* Args Unknown */): unknown};
  RequestUserStats: {(/* Args Unknown */): unknown};
  GetUserStat: {(/* Args Unknown */): unknown};
  GetUserAchievement: {(/* Args Unknown */): unknown};
  GetUserAchievementAndUnlockTime: {(/* Args Unknown */): unknown};
  ResetAllStats: {(/* Args Unknown */): unknown};
  FindOrCreateLeaderboard: {(/* Args Unknown */): unknown};
  FindLeaderboard: {(/* Args Unknown */): unknown};
  GetLeaderboardName: {(/* Args Unknown */): unknown};
  GetLeaderboardEntryCount: {(/* Args Unknown */): unknown};
  GetLeaderboardSortMethod: {(/* Args Unknown */): unknown};
  GetLeaderboardDisplayType: {(/* Args Unknown */): unknown};
  DownloadLeaderboardEntries: {(/* Args Unknown */): unknown};
  DownloadLeaderboardEntriesForUsers: {(/* Args Unknown */): unknown};
  GetDownloadedLeaderboardEntry: {(/* Args Unknown */): unknown};
  UploadLeaderboardScore: {(/* Args Unknown */): unknown};
  AttachLeaderboardUGC: {(/* Args Unknown */): unknown};
  GetNumberOfCurrentPlayers: {(/* Args Unknown */): unknown};
  RequestGlobalAchievementPercentages: {(/* Args Unknown */): unknown};
  GetMostAchievedAchievementInfo: {(/* Args Unknown */): unknown};
  GetNextMostAchievedAchievementInfo: {(/* Args Unknown */): unknown};
  GetAchievementAchievedPercent: {(/* Args Unknown */): unknown};
  RequestGlobalStats: {(/* Args Unknown */): unknown};
  GetGlobalStat: {(/* Args Unknown */): unknown};
  GetGlobalStatHistory: {(/* Args Unknown */): unknown};
  GetAchievementProgressLimits: {(/* Args Unknown */): unknown};
  RequestUserStats: {(/* Args Unknown */): Promise<unknown>};
  FindOrCreateLeaderboard: {(/* Args Unknown */): Promise<unknown>};
  FindLeaderboard: {(/* Args Unknown */): Promise<unknown>};
  DownloadLeaderboardEntries: {(/* Args Unknown */): Promise<unknown>};
  DownloadLeaderboardEntriesForUsers: {(/* Args Unknown */): Promise<unknown>};
  UploadLeaderboardScore: {(/* Args Unknown */): Promise<unknown>};
  AttachLeaderboardUGC: {(/* Args Unknown */): Promise<unknown>};
  GetNumberOfCurrentPlayers: {(/* Args Unknown */): Promise<unknown>};
  RequestGlobalAchievementPercentages: {(/* Args Unknown */): Promise<unknown>};
  RequestGlobalStats: {(/* Args Unknown */): Promise<unknown>};
}
interface steamapps {
  constructor(/* Args Unknown */);
  BIsSubscribed: {(/* Args Unknown */): unknown};
  BIsLowViolence: {(/* Args Unknown */): unknown};
  BIsCybercafe: {(/* Args Unknown */): unknown};
  BIsVACBanned: {(/* Args Unknown */): unknown};
  GetCurrentGameLanguage: {(/* Args Unknown */): unknown};
  GetAvailableGameLanguages: {(/* Args Unknown */): unknown};
  BIsSubscribedApp: {(/* Args Unknown */): unknown};
  BIsDlcInstalled: {(/* Args Unknown */): unknown};
  GetEarliestPurchaseUnixTime: {(/* Args Unknown */): unknown};
  BIsSubscribedFromFreeWeekend: {(/* Args Unknown */): unknown};
  GetDLCCount: {(/* Args Unknown */): unknown};
  BGetDLCDataByIndex: {(/* Args Unknown */): unknown};
  InstallDLC: {(/* Args Unknown */): unknown};
  UninstallDLC: {(/* Args Unknown */): unknown};
  RequestAppProofOfPurchaseKey: {(/* Args Unknown */): unknown};
  GetCurrentBetaName: {(/* Args Unknown */): unknown};
  MarkContentCorrupt: {(/* Args Unknown */): unknown};
  GetInstalledDepots: {(/* Args Unknown */): unknown};
  GetAppInstallDir: {(/* Args Unknown */): unknown};
  BIsAppInstalled: {(/* Args Unknown */): unknown};
  GetAppOwner: {(/* Args Unknown */): unknown};
  GetLaunchQueryParam: {(/* Args Unknown */): unknown};
  GetDlcDownloadProgress: {(/* Args Unknown */): unknown};
  GetAppBuildId: {(/* Args Unknown */): unknown};
  RequestAllProofOfPurchaseKeys: {(/* Args Unknown */): unknown};
  GetFileDetails: {(/* Args Unknown */): unknown};
  GetLaunchCommandLine: {(/* Args Unknown */): unknown};
  BIsSubscribedFromFamilySharing: {(/* Args Unknown */): unknown};
  BIsTimedTrial: {(/* Args Unknown */): unknown};
  GetFileDetails: {(/* Args Unknown */): Promise<unknown>};
}
interface steamnetworking {
  constructor(/* Args Unknown */);
  SendP2PPacket: {(/* Args Unknown */): unknown};
  IsP2PPacketAvailable: {(/* Args Unknown */): unknown};
  ReadP2PPacket: {(/* Args Unknown */): unknown};
  AcceptP2PSessionWithUser: {(/* Args Unknown */): unknown};
  CloseP2PSessionWithUser: {(/* Args Unknown */): unknown};
  CloseP2PChannelWithUser: {(/* Args Unknown */): unknown};
  GetP2PSessionState: {(/* Args Unknown */): unknown};
  AllowP2PPacketRelay: {(/* Args Unknown */): unknown};
  CreateListenSocket: {(/* Args Unknown */): unknown};
  CreateP2PConnectionSocket: {(/* Args Unknown */): unknown};
  CreateConnectionSocket: {(/* Args Unknown */): unknown};
  DestroySocket: {(/* Args Unknown */): unknown};
  DestroyListenSocket: {(/* Args Unknown */): unknown};
  SendDataOnSocket: {(/* Args Unknown */): unknown};
  IsDataAvailableOnSocket: {(/* Args Unknown */): unknown};
  RetrieveDataFromSocket: {(/* Args Unknown */): unknown};
  IsDataAvailable: {(/* Args Unknown */): unknown};
  RetrieveData: {(/* Args Unknown */): unknown};
  GetSocketInfo: {(/* Args Unknown */): unknown};
  GetListenSocketInfo: {(/* Args Unknown */): unknown};
  GetSocketConnectionType: {(/* Args Unknown */): unknown};
  GetMaxPacketSize: {(/* Args Unknown */): unknown};
}
interface steamremotestorage {
  constructor(/* Args Unknown */);
  FileWrite: {(/* Args Unknown */): unknown};
  FileRead: {(/* Args Unknown */): unknown};
  FileWriteAsync: {(/* Args Unknown */): unknown};
  FileReadAsync: {(/* Args Unknown */): unknown};
  FileReadAsyncComplete: {(/* Args Unknown */): unknown};
  FileForget: {(/* Args Unknown */): unknown};
  FileDelete: {(/* Args Unknown */): unknown};
  FileShare: {(/* Args Unknown */): unknown};
  SetSyncPlatforms: {(/* Args Unknown */): unknown};
  FileWriteStreamOpen: {(/* Args Unknown */): unknown};
  FileWriteStreamWriteChunk: {(/* Args Unknown */): unknown};
  FileWriteStreamClose: {(/* Args Unknown */): unknown};
  FileWriteStreamCancel: {(/* Args Unknown */): unknown};
  FileExists: {(/* Args Unknown */): unknown};
  FilePersisted: {(/* Args Unknown */): unknown};
  GetFileSize: {(/* Args Unknown */): unknown};
  GetFileTimestamp: {(/* Args Unknown */): unknown};
  GetSyncPlatforms: {(/* Args Unknown */): unknown};
  GetFileCount: {(/* Args Unknown */): unknown};
  GetFileNameAndSize: {(/* Args Unknown */): unknown};
  GetQuota: {(/* Args Unknown */): unknown};
  IsCloudEnabledForAccount: {(/* Args Unknown */): unknown};
  IsCloudEnabledForApp: {(/* Args Unknown */): unknown};
  SetCloudEnabledForApp: {(/* Args Unknown */): unknown};
  UGCDownload: {(/* Args Unknown */): unknown};
  GetUGCDownloadProgress: {(/* Args Unknown */): unknown};
  GetUGCDetails: {(/* Args Unknown */): unknown};
  UGCRead: {(/* Args Unknown */): unknown};
  GetCachedUGCCount: {(/* Args Unknown */): unknown};
  GetCachedUGCHandle: {(/* Args Unknown */): unknown};
  PublishWorkshopFile: {(/* Args Unknown */): unknown};
  CreatePublishedFileUpdateRequest: {(/* Args Unknown */): unknown};
  UpdatePublishedFileFile: {(/* Args Unknown */): unknown};
  UpdatePublishedFilePreviewFile: {(/* Args Unknown */): unknown};
  UpdatePublishedFileTitle: {(/* Args Unknown */): unknown};
  UpdatePublishedFileDescription: {(/* Args Unknown */): unknown};
  UpdatePublishedFileVisibility: {(/* Args Unknown */): unknown};
  UpdatePublishedFileTags: {(/* Args Unknown */): unknown};
  CommitPublishedFileUpdate: {(/* Args Unknown */): unknown};
  GetPublishedFileDetails: {(/* Args Unknown */): unknown};
  DeletePublishedFile: {(/* Args Unknown */): unknown};
  EnumerateUserPublishedFiles: {(/* Args Unknown */): unknown};
  SubscribePublishedFile: {(/* Args Unknown */): unknown};
  EnumerateUserSubscribedFiles: {(/* Args Unknown */): unknown};
  UnsubscribePublishedFile: {(/* Args Unknown */): unknown};
  UpdatePublishedFileSetChangeDescription: {(/* Args Unknown */): unknown};
  GetPublishedItemVoteDetails: {(/* Args Unknown */): unknown};
  UpdateUserPublishedItemVote: {(/* Args Unknown */): unknown};
  GetUserPublishedItemVoteDetails: {(/* Args Unknown */): unknown};
  EnumerateUserSharedWorkshopFiles: {(/* Args Unknown */): unknown};
  PublishVideo: {(/* Args Unknown */): unknown};
  SetUserPublishedFileAction: {(/* Args Unknown */): unknown};
  EnumeratePublishedFilesByUserAction: {(/* Args Unknown */): unknown};
  EnumeratePublishedWorkshopFiles: {(/* Args Unknown */): unknown};
  UGCDownloadToLocation: {(/* Args Unknown */): unknown};
  FileWriteAsync: {(/* Args Unknown */): Promise<unknown>};
  FileReadAsync: {(/* Args Unknown */): Promise<unknown>};
  FileShare: {(/* Args Unknown */): Promise<unknown>};
  UGCDownload: {(/* Args Unknown */): Promise<unknown>};
  PublishWorkshopFile: {(/* Args Unknown */): Promise<unknown>};
  CommitPublishedFileUpdate: {(/* Args Unknown */): Promise<unknown>};
  GetPublishedFileDetails: {(/* Args Unknown */): Promise<unknown>};
  DeletePublishedFile: {(/* Args Unknown */): Promise<unknown>};
  EnumerateUserPublishedFiles: {(/* Args Unknown */): Promise<unknown>};
  SubscribePublishedFile: {(/* Args Unknown */): Promise<unknown>};
  EnumerateUserSubscribedFiles: {(/* Args Unknown */): Promise<unknown>};
  UnsubscribePublishedFile: {(/* Args Unknown */): Promise<unknown>};
  GetPublishedItemVoteDetails: {(/* Args Unknown */): Promise<unknown>};
  UpdateUserPublishedItemVote: {(/* Args Unknown */): Promise<unknown>};
  GetUserPublishedItemVoteDetails: {(/* Args Unknown */): Promise<unknown>};
  EnumerateUserSharedWorkshopFiles: {(/* Args Unknown */): Promise<unknown>};
  PublishVideo: {(/* Args Unknown */): Promise<unknown>};
  SetUserPublishedFileAction: {(/* Args Unknown */): Promise<unknown>};
  EnumeratePublishedFilesByUserAction: {(/* Args Unknown */): Promise<unknown>};
  EnumeratePublishedWorkshopFiles: {(/* Args Unknown */): Promise<unknown>};
  UGCDownloadToLocation: {(/* Args Unknown */): Promise<unknown>};
}
interface steamscreenshots {
  constructor(/* Args Unknown */);
  WriteScreenshot: {(/* Args Unknown */): unknown};
  AddScreenshotToLibrary: {(/* Args Unknown */): unknown};
  TriggerScreenshot: {(/* Args Unknown */): unknown};
  HookScreenshots: {(/* Args Unknown */): unknown};
  SetLocation: {(/* Args Unknown */): unknown};
  TagUser: {(/* Args Unknown */): unknown};
  TagPublishedFile: {(/* Args Unknown */): unknown};
  IsScreenshotsHooked: {(/* Args Unknown */): unknown};
  AddVRScreenshotToLibrary: {(/* Args Unknown */): unknown};
}
interface steammusic {
  constructor(/* Args Unknown */);
  BIsEnabled: {(/* Args Unknown */): unknown};
  BIsPlaying: {(/* Args Unknown */): unknown};
  GetPlaybackStatus: {(/* Args Unknown */): unknown};
  Play: {(/* Args Unknown */): unknown};
  Pause: {(/* Args Unknown */): unknown};
  PlayPrevious: {(/* Args Unknown */): unknown};
  PlayNext: {(/* Args Unknown */): unknown};
  SetVolume: {(/* Args Unknown */): unknown};
  GetVolume: {(/* Args Unknown */): unknown};
}
interface steammusicremote {
  constructor(/* Args Unknown */);
  RegisterSteamMusicRemote: {(/* Args Unknown */): unknown};
  DeregisterSteamMusicRemote: {(/* Args Unknown */): unknown};
  BIsCurrentMusicRemote: {(/* Args Unknown */): unknown};
  BActivationSuccess: {(/* Args Unknown */): unknown};
  SetDisplayName: {(/* Args Unknown */): unknown};
  SetPNGIcon_64x64: {(/* Args Unknown */): unknown};
  EnablePlayPrevious: {(/* Args Unknown */): unknown};
  EnablePlayNext: {(/* Args Unknown */): unknown};
  EnableShuffled: {(/* Args Unknown */): unknown};
  EnableLooped: {(/* Args Unknown */): unknown};
  EnableQueue: {(/* Args Unknown */): unknown};
  EnablePlaylists: {(/* Args Unknown */): unknown};
  UpdatePlaybackStatus: {(/* Args Unknown */): unknown};
  UpdateShuffled: {(/* Args Unknown */): unknown};
  UpdateLooped: {(/* Args Unknown */): unknown};
  UpdateVolume: {(/* Args Unknown */): unknown};
  CurrentEntryWillChange: {(/* Args Unknown */): unknown};
  CurrentEntryIsAvailable: {(/* Args Unknown */): unknown};
  UpdateCurrentEntryText: {(/* Args Unknown */): unknown};
  UpdateCurrentEntryElapsedSeconds: {(/* Args Unknown */): unknown};
  UpdateCurrentEntryCoverArt: {(/* Args Unknown */): unknown};
  CurrentEntryDidChange: {(/* Args Unknown */): unknown};
  QueueWillChange: {(/* Args Unknown */): unknown};
  ResetQueueEntries: {(/* Args Unknown */): unknown};
  SetQueueEntry: {(/* Args Unknown */): unknown};
  SetCurrentQueueEntry: {(/* Args Unknown */): unknown};
  QueueDidChange: {(/* Args Unknown */): unknown};
  PlaylistWillChange: {(/* Args Unknown */): unknown};
  ResetPlaylistEntries: {(/* Args Unknown */): unknown};
  SetPlaylistEntry: {(/* Args Unknown */): unknown};
  SetCurrentPlaylistEntry: {(/* Args Unknown */): unknown};
  PlaylistDidChange: {(/* Args Unknown */): unknown};
}
interface steamhttp {
  constructor(/* Args Unknown */);
  CreateHTTPRequest: {(/* Args Unknown */): unknown};
  SetHTTPRequestContextValue: {(/* Args Unknown */): unknown};
  SetHTTPRequestNetworkActivityTimeout: {(/* Args Unknown */): unknown};
  SetHTTPRequestHeaderValue: {(/* Args Unknown */): unknown};
  SetHTTPRequestGetOrPostParameter: {(/* Args Unknown */): unknown};
  SendHTTPRequest: {(/* Args Unknown */): unknown};
  SendHTTPRequestAndStreamResponse: {(/* Args Unknown */): unknown};
  DeferHTTPRequest: {(/* Args Unknown */): unknown};
  PrioritizeHTTPRequest: {(/* Args Unknown */): unknown};
  GetHTTPResponseHeaderSize: {(/* Args Unknown */): unknown};
  GetHTTPResponseHeaderValue: {(/* Args Unknown */): unknown};
  GetHTTPResponseBodySize: {(/* Args Unknown */): unknown};
  GetHTTPResponseBodyData: {(/* Args Unknown */): unknown};
  GetHTTPStreamingResponseBodyData: {(/* Args Unknown */): unknown};
  ReleaseHTTPRequest: {(/* Args Unknown */): unknown};
  GetHTTPDownloadProgressPct: {(/* Args Unknown */): unknown};
  SetHTTPRequestRawPostBody: {(/* Args Unknown */): unknown};
  CreateCookieContainer: {(/* Args Unknown */): unknown};
  ReleaseCookieContainer: {(/* Args Unknown */): unknown};
  SetCookie: {(/* Args Unknown */): unknown};
  SetHTTPRequestCookieContainer: {(/* Args Unknown */): unknown};
  SetHTTPRequestUserAgentInfo: {(/* Args Unknown */): unknown};
  SetHTTPRequestRequiresVerifiedCertificate: {(/* Args Unknown */): unknown};
  SetHTTPRequestAbsoluteTimeoutMS: {(/* Args Unknown */): unknown};
  GetHTTPRequestWasTimedOut: {(/* Args Unknown */): unknown};
}
interface steamcontroller {
  constructor(/* Args Unknown */);
  Init: {(/* Args Unknown */): unknown};
  Shutdown: {(/* Args Unknown */): unknown};
  RunFrame: {(/* Args Unknown */): unknown};
  GetConnectedControllers: {(/* Args Unknown */): unknown};
  GetActionSetHandle: {(/* Args Unknown */): unknown};
  ActivateActionSet: {(/* Args Unknown */): unknown};
  GetCurrentActionSet: {(/* Args Unknown */): unknown};
  ActivateActionSetLayer: {(/* Args Unknown */): unknown};
  DeactivateActionSetLayer: {(/* Args Unknown */): unknown};
  DeactivateAllActionSetLayers: {(/* Args Unknown */): unknown};
  GetActiveActionSetLayers: {(/* Args Unknown */): unknown};
  GetDigitalActionHandle: {(/* Args Unknown */): unknown};
  GetDigitalActionData: {(/* Args Unknown */): unknown};
  GetDigitalActionOrigins: {(/* Args Unknown */): unknown};
  GetAnalogActionHandle: {(/* Args Unknown */): unknown};
  GetAnalogActionData: {(/* Args Unknown */): unknown};
  GetAnalogActionOrigins: {(/* Args Unknown */): unknown};
  GetGlyphForActionOrigin: {(/* Args Unknown */): unknown};
  GetStringForActionOrigin: {(/* Args Unknown */): unknown};
  StopAnalogActionMomentum: {(/* Args Unknown */): unknown};
  GetMotionData: {(/* Args Unknown */): unknown};
  TriggerHapticPulse: {(/* Args Unknown */): unknown};
  TriggerRepeatedHapticPulse: {(/* Args Unknown */): unknown};
  TriggerVibration: {(/* Args Unknown */): unknown};
  SetLEDColor: {(/* Args Unknown */): unknown};
  ShowBindingPanel: {(/* Args Unknown */): unknown};
  GetInputTypeForHandle: {(/* Args Unknown */): unknown};
  GetControllerForGamepadIndex: {(/* Args Unknown */): unknown};
  GetGamepadIndexForController: {(/* Args Unknown */): unknown};
  GetStringForXboxOrigin: {(/* Args Unknown */): unknown};
  GetGlyphForXboxOrigin: {(/* Args Unknown */): unknown};
  GetActionOriginFromXboxOrigin: {(/* Args Unknown */): unknown};
  TranslateActionOrigin: {(/* Args Unknown */): unknown};
  GetControllerBindingRevision: {(/* Args Unknown */): unknown};
}
interface steamugc {
  constructor(/* Args Unknown */);
  CreateQueryUserUGCRequest: {(/* Args Unknown */): unknown};
  CreateQueryAllUGCRequest: {(/* Args Unknown */): unknown};
  CreateQueryUGCDetailsRequest: {(/* Args Unknown */): unknown};
  SendQueryUGCRequest: {(/* Args Unknown */): unknown};
  GetQueryUGCResult: {(/* Args Unknown */): unknown};
  GetQueryUGCNumTags: {(/* Args Unknown */): unknown};
  GetQueryUGCTag: {(/* Args Unknown */): unknown};
  GetQueryUGCTagDisplayName: {(/* Args Unknown */): unknown};
  GetQueryUGCPreviewURL: {(/* Args Unknown */): unknown};
  GetQueryUGCMetadata: {(/* Args Unknown */): unknown};
  GetQueryUGCChildren: {(/* Args Unknown */): unknown};
  GetQueryUGCStatistic: {(/* Args Unknown */): unknown};
  GetQueryUGCNumAdditionalPreviews: {(/* Args Unknown */): unknown};
  GetQueryUGCAdditionalPreview: {(/* Args Unknown */): unknown};
  GetQueryUGCNumKeyValueTags: {(/* Args Unknown */): unknown};
  GetQueryUGCKeyValueTag: {(/* Args Unknown */): unknown};
  ReleaseQueryUGCRequest: {(/* Args Unknown */): unknown};
  AddRequiredTag: {(/* Args Unknown */): unknown};
  AddRequiredTagGroup: {(/* Args Unknown */): unknown};
  AddExcludedTag: {(/* Args Unknown */): unknown};
  SetReturnOnlyIDs: {(/* Args Unknown */): unknown};
  SetReturnKeyValueTags: {(/* Args Unknown */): unknown};
  SetReturnLongDescription: {(/* Args Unknown */): unknown};
  SetReturnMetadata: {(/* Args Unknown */): unknown};
  SetReturnChildren: {(/* Args Unknown */): unknown};
  SetReturnAdditionalPreviews: {(/* Args Unknown */): unknown};
  SetReturnTotalOnly: {(/* Args Unknown */): unknown};
  SetReturnPlaytimeStats: {(/* Args Unknown */): unknown};
  SetLanguage: {(/* Args Unknown */): unknown};
  SetAllowCachedResponse: {(/* Args Unknown */): unknown};
  SetCloudFileNameFilter: {(/* Args Unknown */): unknown};
  SetMatchAnyTag: {(/* Args Unknown */): unknown};
  SetSearchText: {(/* Args Unknown */): unknown};
  SetRankedByTrendDays: {(/* Args Unknown */): unknown};
  AddRequiredKeyValueTag: {(/* Args Unknown */): unknown};
  RequestUGCDetails: {(/* Args Unknown */): unknown};
  CreateItem: {(/* Args Unknown */): unknown};
  StartItemUpdate: {(/* Args Unknown */): unknown};
  SetItemTitle: {(/* Args Unknown */): unknown};
  SetItemDescription: {(/* Args Unknown */): unknown};
  SetItemUpdateLanguage: {(/* Args Unknown */): unknown};
  SetItemMetadata: {(/* Args Unknown */): unknown};
  SetItemVisibility: {(/* Args Unknown */): unknown};
  SetItemTags: {(/* Args Unknown */): unknown};
  SetItemContent: {(/* Args Unknown */): unknown};
  SetItemPreview: {(/* Args Unknown */): unknown};
  SetAllowLegacyUpload: {(/* Args Unknown */): unknown};
  RemoveAllItemKeyValueTags: {(/* Args Unknown */): unknown};
  RemoveItemKeyValueTags: {(/* Args Unknown */): unknown};
  AddItemKeyValueTag: {(/* Args Unknown */): unknown};
  AddItemPreviewFile: {(/* Args Unknown */): unknown};
  AddItemPreviewVideo: {(/* Args Unknown */): unknown};
  UpdateItemPreviewFile: {(/* Args Unknown */): unknown};
  UpdateItemPreviewVideo: {(/* Args Unknown */): unknown};
  RemoveItemPreview: {(/* Args Unknown */): unknown};
  SubmitItemUpdate: {(/* Args Unknown */): unknown};
  GetItemUpdateProgress: {(/* Args Unknown */): unknown};
  SetUserItemVote: {(/* Args Unknown */): unknown};
  GetUserItemVote: {(/* Args Unknown */): unknown};
  AddItemToFavorites: {(/* Args Unknown */): unknown};
  RemoveItemFromFavorites: {(/* Args Unknown */): unknown};
  SubscribeItem: {(/* Args Unknown */): unknown};
  UnsubscribeItem: {(/* Args Unknown */): unknown};
  GetNumSubscribedItems: {(/* Args Unknown */): unknown};
  GetSubscribedItems: {(/* Args Unknown */): unknown};
  GetItemState: {(/* Args Unknown */): unknown};
  GetItemInstallInfo: {(/* Args Unknown */): unknown};
  GetItemDownloadInfo: {(/* Args Unknown */): unknown};
  DownloadItem: {(/* Args Unknown */): unknown};
  BInitWorkshopForGameServer: {(/* Args Unknown */): unknown};
  SuspendDownloads: {(/* Args Unknown */): unknown};
  StartPlaytimeTracking: {(/* Args Unknown */): unknown};
  StopPlaytimeTracking: {(/* Args Unknown */): unknown};
  StopPlaytimeTrackingForAllItems: {(/* Args Unknown */): unknown};
  AddDependency: {(/* Args Unknown */): unknown};
  RemoveDependency: {(/* Args Unknown */): unknown};
  AddAppDependency: {(/* Args Unknown */): unknown};
  RemoveAppDependency: {(/* Args Unknown */): unknown};
  GetAppDependencies: {(/* Args Unknown */): unknown};
  DeleteItem: {(/* Args Unknown */): unknown};
  SendQueryUGCRequest: {(/* Args Unknown */): Promise<unknown>};
  RequestUGCDetails: {(/* Args Unknown */): Promise<unknown>};
  CreateItem: {(/* Args Unknown */): Promise<unknown>};
  SubmitItemUpdate: {(/* Args Unknown */): Promise<unknown>};
  SetUserItemVote: {(/* Args Unknown */): Promise<unknown>};
  GetUserItemVote: {(/* Args Unknown */): Promise<unknown>};
  AddItemToFavorites: {(/* Args Unknown */): Promise<unknown>};
  RemoveItemFromFavorites: {(/* Args Unknown */): Promise<unknown>};
  SubscribeItem: {(/* Args Unknown */): Promise<unknown>};
  UnsubscribeItem: {(/* Args Unknown */): Promise<unknown>};
  StartPlaytimeTracking: {(/* Args Unknown */): Promise<unknown>};
  StopPlaytimeTracking: {(/* Args Unknown */): Promise<unknown>};
  StopPlaytimeTrackingForAllItems: {(/* Args Unknown */): Promise<unknown>};
  AddDependency: {(/* Args Unknown */): Promise<unknown>};
  RemoveDependency: {(/* Args Unknown */): Promise<unknown>};
  AddAppDependency: {(/* Args Unknown */): Promise<unknown>};
  RemoveAppDependency: {(/* Args Unknown */): Promise<unknown>};
  GetAppDependencies: {(/* Args Unknown */): Promise<unknown>};
  DeleteItem: {(/* Args Unknown */): Promise<unknown>};
}
interface steamapplist {
  constructor(/* Args Unknown */);
  GetNumInstalledApps: {(/* Args Unknown */): unknown};
  GetInstalledApps: {(/* Args Unknown */): unknown};
  GetAppName: {(/* Args Unknown */): unknown};
  GetAppInstallDir: {(/* Args Unknown */): unknown};
  GetAppBuildId: {(/* Args Unknown */): unknown};
}
interface steamhtmlsurface {
  constructor(/* Args Unknown */);
  Init: {(/* Args Unknown */): unknown};
  Shutdown: {(/* Args Unknown */): unknown};
  CreateBrowser: {(/* Args Unknown */): unknown};
  RemoveBrowser: {(/* Args Unknown */): unknown};
  LoadURL: {(/* Args Unknown */): unknown};
  SetSize: {(/* Args Unknown */): unknown};
  StopLoad: {(/* Args Unknown */): unknown};
  Reload: {(/* Args Unknown */): unknown};
  GoBack: {(/* Args Unknown */): unknown};
  GoForward: {(/* Args Unknown */): unknown};
  AddHeader: {(/* Args Unknown */): unknown};
  ExecuteJavascript: {(/* Args Unknown */): unknown};
  MouseUp: {(/* Args Unknown */): unknown};
  MouseDown: {(/* Args Unknown */): unknown};
  MouseDoubleClick: {(/* Args Unknown */): unknown};
  MouseMove: {(/* Args Unknown */): unknown};
  MouseWheel: {(/* Args Unknown */): unknown};
  KeyDown: {(/* Args Unknown */): unknown};
  KeyUp: {(/* Args Unknown */): unknown};
  KeyChar: {(/* Args Unknown */): unknown};
  SetHorizontalScroll: {(/* Args Unknown */): unknown};
  SetVerticalScroll: {(/* Args Unknown */): unknown};
  SetKeyFocus: {(/* Args Unknown */): unknown};
  ViewSource: {(/* Args Unknown */): unknown};
  CopyToClipboard: {(/* Args Unknown */): unknown};
  PasteFromClipboard: {(/* Args Unknown */): unknown};
  Find: {(/* Args Unknown */): unknown};
  StopFind: {(/* Args Unknown */): unknown};
  GetLinkAtPosition: {(/* Args Unknown */): unknown};
  SetCookie: {(/* Args Unknown */): unknown};
  SetPageScaleFactor: {(/* Args Unknown */): unknown};
  SetBackgroundMode: {(/* Args Unknown */): unknown};
  SetDPIScalingFactor: {(/* Args Unknown */): unknown};
  OpenDeveloperTools: {(/* Args Unknown */): unknown};
  AllowStartRequest: {(/* Args Unknown */): unknown};
  JSDialogResponse: {(/* Args Unknown */): unknown};
  FileLoadDialogResponse: {(/* Args Unknown */): unknown};
  CreateBrowser: {(/* Args Unknown */): Promise<unknown>};
}
interface steaminventory {
  constructor(/* Args Unknown */);
  GetResultStatus: {(/* Args Unknown */): unknown};
  GetResultItems: {(/* Args Unknown */): unknown};
  GetResultItemProperty: {(/* Args Unknown */): unknown};
  GetResultTimestamp: {(/* Args Unknown */): unknown};
  CheckResultSteamID: {(/* Args Unknown */): unknown};
  DestroyResult: {(/* Args Unknown */): unknown};
  GetAllItems: {(/* Args Unknown */): unknown};
  GetItemsByID: {(/* Args Unknown */): unknown};
  SerializeResult: {(/* Args Unknown */): unknown};
  DeserializeResult: {(/* Args Unknown */): unknown};
  GenerateItems: {(/* Args Unknown */): unknown};
  GrantPromoItems: {(/* Args Unknown */): unknown};
  AddPromoItem: {(/* Args Unknown */): unknown};
  AddPromoItems: {(/* Args Unknown */): unknown};
  ConsumeItem: {(/* Args Unknown */): unknown};
  ExchangeItems: {(/* Args Unknown */): unknown};
  TransferItemQuantity: {(/* Args Unknown */): unknown};
  SendItemDropHeartbeat: {(/* Args Unknown */): unknown};
  TriggerItemDrop: {(/* Args Unknown */): unknown};
  TradeItems: {(/* Args Unknown */): unknown};
  LoadItemDefinitions: {(/* Args Unknown */): unknown};
  GetItemDefinitionIDs: {(/* Args Unknown */): unknown};
  GetItemDefinitionProperty: {(/* Args Unknown */): unknown};
  RequestEligiblePromoItemDefinitionsIDs: {(/* Args Unknown */): unknown};
  GetEligiblePromoItemDefinitionIDs: {(/* Args Unknown */): unknown};
  StartPurchase: {(/* Args Unknown */): unknown};
  RequestPrices: {(/* Args Unknown */): unknown};
  GetNumItemsWithPrices: {(/* Args Unknown */): unknown};
  GetItemsWithPrices: {(/* Args Unknown */): unknown};
  GetItemPrice: {(/* Args Unknown */): unknown};
  StartUpdateProperties: {(/* Args Unknown */): unknown};
  RemoveProperty: {(/* Args Unknown */): unknown};
  SetProperty: {(/* Args Unknown */): unknown};
  SubmitUpdateProperties: {(/* Args Unknown */): unknown};
  InspectItem: {(/* Args Unknown */): unknown};
  RequestEligiblePromoItemDefinitionsIDs: {(/* Args Unknown */): Promise<unknown>};
  StartPurchase: {(/* Args Unknown */): Promise<unknown>};
  RequestPrices: {(/* Args Unknown */): Promise<unknown>};
}
interface steamvideo {
  constructor(/* Args Unknown */);
  GetVideoURL: {(/* Args Unknown */): unknown};
  IsBroadcasting: {(/* Args Unknown */): unknown};
  GetOPFSettings: {(/* Args Unknown */): unknown};
  GetOPFStringForApp: {(/* Args Unknown */): unknown};
}
interface steamparentalsettings {
  constructor(/* Args Unknown */);
  BIsParentalLockEnabled: {(/* Args Unknown */): unknown};
  BIsParentalLockLocked: {(/* Args Unknown */): unknown};
  BIsAppBlocked: {(/* Args Unknown */): unknown};
  BIsAppInBlockList: {(/* Args Unknown */): unknown};
  BIsFeatureBlocked: {(/* Args Unknown */): unknown};
  BIsFeatureInBlockList: {(/* Args Unknown */): unknown};
}
interface steaminput {
  constructor(/* Args Unknown */);
  Init: {(/* Args Unknown */): unknown};
  Shutdown: {(/* Args Unknown */): unknown};
  RunFrame: {(/* Args Unknown */): unknown};
  GetConnectedControllers: {(/* Args Unknown */): unknown};
  GetActionSetHandle: {(/* Args Unknown */): unknown};
  ActivateActionSet: {(/* Args Unknown */): unknown};
  GetCurrentActionSet: {(/* Args Unknown */): unknown};
  ActivateActionSetLayer: {(/* Args Unknown */): unknown};
  DeactivateActionSetLayer: {(/* Args Unknown */): unknown};
  DeactivateAllActionSetLayers: {(/* Args Unknown */): unknown};
  GetActiveActionSetLayers: {(/* Args Unknown */): unknown};
  GetDigitalActionHandle: {(/* Args Unknown */): unknown};
  GetDigitalActionData: {(/* Args Unknown */): unknown};
  GetDigitalActionOrigins: {(/* Args Unknown */): unknown};
  GetAnalogActionHandle: {(/* Args Unknown */): unknown};
  GetAnalogActionData: {(/* Args Unknown */): unknown};
  GetAnalogActionOrigins: {(/* Args Unknown */): unknown};
  GetGlyphForActionOrigin: {(/* Args Unknown */): unknown};
  GetStringForActionOrigin: {(/* Args Unknown */): unknown};
  StopAnalogActionMomentum: {(/* Args Unknown */): unknown};
  GetMotionData: {(/* Args Unknown */): unknown};
  TriggerVibration: {(/* Args Unknown */): unknown};
  SetLEDColor: {(/* Args Unknown */): unknown};
  TriggerHapticPulse: {(/* Args Unknown */): unknown};
  TriggerRepeatedHapticPulse: {(/* Args Unknown */): unknown};
  ShowBindingPanel: {(/* Args Unknown */): unknown};
  GetInputTypeForHandle: {(/* Args Unknown */): unknown};
  GetControllerForGamepadIndex: {(/* Args Unknown */): unknown};
  GetGamepadIndexForController: {(/* Args Unknown */): unknown};
  GetStringForXboxOrigin: {(/* Args Unknown */): unknown};
  GetGlyphForXboxOrigin: {(/* Args Unknown */): unknown};
  GetActionOriginFromXboxOrigin: {(/* Args Unknown */): unknown};
  TranslateActionOrigin: {(/* Args Unknown */): unknown};
  GetDeviceBindingRevision: {(/* Args Unknown */): unknown};
  GetRemotePlaySessionID: {(/* Args Unknown */): unknown};
}
interface steamremoteplay {
  constructor(/* Args Unknown */);
  GetSessionCount: {(/* Args Unknown */): unknown};
  GetSessionID: {(/* Args Unknown */): unknown};
  GetSessionSteamID: {(/* Args Unknown */): unknown};
  GetSessionClientName: {(/* Args Unknown */): unknown};
  GetSessionClientFormFactor: {(/* Args Unknown */): unknown};
  BGetSessionClientResolution: {(/* Args Unknown */): unknown};
  BSendRemotePlayTogetherInvite: {(/* Args Unknown */): unknown};
}
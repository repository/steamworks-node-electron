
export async function GetFileDetails(pszFileName: string): Promise<{ m_eResult: EResult, m_ulFileSize: number, m_FileSHA: number, m_unFlags: number }>;
export async function SetPersonaName(pchPersonaName: string): Promise<{ m_bSuccess: bool, m_bLocalSuccess: bool, m_result: EResult }>;
export async function DownloadClanActivityCounts(psteamIDClans: unknown, cClansToRequest: number): Promise<{ m_bSuccess: bool }>;
export async function RequestClanOfficerList(steamIDClan: unknown): Promise<{ m_steamIDClan: unknown, m_cOfficers: number, m_bSuccess: number }>;
export async function JoinClanChatRoom(steamIDClan: unknown): Promise<{ m_steamIDClanChat: unknown, m_eChatRoomEnterResponse: EChatRoomEnterResponse }>;
export async function GetFollowerCount(steamID: unknown): Promise<{ m_eResult: EResult, m_steamID: unknown, m_nCount: number }>;
export async function IsFollowing(steamID: unknown): Promise<{ m_eResult: EResult, m_steamID: unknown, m_bIsFollowing: bool }>;
export async function EnumerateFollowingList(unStartIndex: number): Promise<{ m_eResult: EResult, m_rgSteamID: unknown, m_nResultsReturned: number, m_nTotalResultCount: number }>;
export async function GetServerReputation(): Promise<{ m_eResult: EResult, m_unReputationScore: number, m_bBanned: bool, m_unBannedIP: number, m_usBannedPort: number, m_ulBannedGameID: number, m_unBanExpires: number }>;
export async function AssociateWithClan(steamIDClan: unknown): Promise<{ m_eResult: EResult }>;
export async function ComputeNewPlayerCompatibility(steamIDNewPlayer: unknown): Promise<{ m_eResult: EResult, m_cPlayersThatDontLikeCandidate: number, m_cPlayersThatCandidateDoesntLike: number, m_cClanPlayersThatDontLikeCandidate: number, m_SteamIDCandidate: unknown }>;
export async function RequestUserStats(steamIDUser: unknown): Promise<{ m_eResult: EResult, m_steamIDUser: unknown }>;
export async function StoreUserStats(steamIDUser: unknown): Promise<{ m_eResult: EResult, m_steamIDUser: unknown }>;
export async function CreateBrowser(pchUserAgent: string, pchUserCSS: string): Promise<{ unBrowserHandle: number }>;
export async function RequestEligiblePromoItemDefinitionsIDs(steamID: unknown): Promise<{ m_result: EResult, m_steamID: unknown, m_numEligiblePromoItemDefs: number, m_bCachedData: bool }>;
export async function StartPurchase(pArrayItemDefs: unknown, punArrayQuantity: unknown, unArrayLength: number): Promise<{ m_result: EResult, m_ulOrderID: number, m_ulTransID: number }>;
export async function RequestPrices(): Promise<{ m_result: EResult, m_rgchCurrency: string }>;
export async function RequestLobbyList(): Promise<{ m_nLobbiesMatching: number }>;
export async function CreateLobby(eLobbyType: ELobbyType, cMaxMembers: number): Promise<{ m_eResult: EResult, m_ulSteamIDLobby: number }>;
export async function JoinLobby(steamIDLobby: unknown): Promise<{ m_ulSteamIDLobby: number, m_rgfChatPermissions: number, m_bLocked: bool, m_EChatRoomEnterResponse: number }>;
export async function JoinParty(ulBeaconID: number): Promise<{ m_eResult: EResult, m_ulBeaconID: number, m_SteamIDBeaconOwner: unknown, m_rgchConnectString: string }>;
export async function CreateBeacon(unOpenSlots: number, pBeaconLocation: unknown, pchConnectString: string, pchMetadata: string): Promise<{ m_eResult: EResult, m_ulBeaconID: number }>;
export async function ChangeNumOpenSlots(ulBeacon: number, unOpenSlots: number): Promise<{ m_eResult: EResult }>;
export async function FileWriteAsync(pchFile: string, pvData: unknown, cubData: number): Promise<{ m_eResult: EResult }>;
export async function FileReadAsync(pchFile: string, nOffset: number, cubToRead: number): Promise<{ m_hFileReadAsync: number, m_eResult: EResult, m_nOffset: number, m_cubRead: number }>;
export async function FileShare(pchFile: string): Promise<{ m_eResult: EResult, m_hFile: number, m_rgchFilename: string }>;
export async function UGCDownload(hContent: number, unPriority: number): Promise<{ m_eResult: EResult, m_hFile: number, m_nAppID: number, m_nSizeInBytes: number, m_pchFileName: string, m_ulSteamIDOwner: number }>;
export async function UGCDownloadToLocation(hContent: number, pchLocation: string, unPriority: number): Promise<{ m_eResult: EResult, m_hFile: number, m_nAppID: number, m_nSizeInBytes: number, m_pchFileName: string, m_ulSteamIDOwner: number }>;
export async function PublishWorkshopFile(pchFile: string, pchPreviewFile: string, nConsumerAppId: number, pchTitle: string, pchDescription: string, eVisibility: ERemoteStoragePublishedFileVisibility, pTags: unknown, eWorkshopFileType: EWorkshopFileType): Promise<{ m_dPercentFile: number, m_bPreview: bool }>;
export async function PublishVideo(eVideoProvider: EWorkshopVideoProvider, pchVideoAccount: string, pchVideoIdentifier: string, pchPreviewFile: string, nConsumerAppId: number, pchTitle: string, pchDescription: string, eVisibility: ERemoteStoragePublishedFileVisibility, pTags: unknown): Promise<{ m_dPercentFile: number, m_bPreview: bool }>;
export async function CommitPublishedFileUpdate(updateHandle: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number, m_bUserNeedsToAcceptWorkshopLegalAgreement: bool }>;
export async function GetPublishedFileDetails(unPublishedFileId: number, unMaxSecondsOld: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number, m_nCreatorAppID: number, m_nConsumerAppID: number, m_rgchTitle: string, m_rgchDescription: string, m_hFile: number, m_hPreviewFile: number, m_ulSteamIDOwner: number, m_rtimeCreated: number, m_rtimeUpdated: number, m_eVisibility: ERemoteStoragePublishedFileVisibility, m_bBanned: bool, m_rgchTags: string, m_bTagsTruncated: bool, m_pchFileName: string, m_nFileSize: number, m_nPreviewFileSize: number, m_rgchURL: string, m_eFileType: EWorkshopFileType, m_bAcceptedForUse: bool }>;
export async function DeletePublishedFile(unPublishedFileId: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number }>;
export async function EnumerateUserPublishedFiles(unStartIndex: number): Promise<{ m_eResult: EResult, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: unknown }>;
export async function EnumerateUserSharedWorkshopFiles(steamId: unknown, unStartIndex: number, pRequiredTags: unknown, pExcludedTags: unknown): Promise<{ m_eResult: EResult, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: unknown }>;
export async function SubscribePublishedFile(unPublishedFileId: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number }>;
export async function SubscribeItem(nPublishedFileID: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number }>;
export async function EnumerateUserSubscribedFiles(unStartIndex: number): Promise<{ m_eResult: EResult, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: unknown, m_rgRTimeSubscribed: number }>;
export async function UnsubscribePublishedFile(unPublishedFileId: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number }>;
export async function UnsubscribeItem(nPublishedFileID: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number }>;
export async function GetPublishedItemVoteDetails(unPublishedFileId: number): Promise<{ m_eResult: EResult, m_unPublishedFileId: number, m_nVotesFor: number, m_nVotesAgainst: number, m_nReports: number, m_fScore: number }>;
export async function GetUserPublishedItemVoteDetails(unPublishedFileId: number): Promise<{ m_eResult: EResult, m_unPublishedFileId: number, m_nVotesFor: number, m_nVotesAgainst: number, m_nReports: number, m_fScore: number }>;
export async function UpdateUserPublishedItemVote(unPublishedFileId: number, bVoteUp: bool): Promise<{ m_eResult: EResult, m_nPublishedFileId: number }>;
export async function SetUserPublishedFileAction(unPublishedFileId: number, eAction: EWorkshopFileAction): Promise<{ m_eResult: EResult, m_nPublishedFileId: number, m_eAction: EWorkshopFileAction }>;
export async function EnumeratePublishedFilesByUserAction(eAction: EWorkshopFileAction, unStartIndex: number): Promise<{ m_eResult: EResult, m_eAction: EWorkshopFileAction, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: unknown, m_rgRTimeUpdated: number }>;
export async function EnumeratePublishedWorkshopFiles(eEnumerationType: EWorkshopEnumerationType, unStartIndex: number, unCount: number, unDays: number, pTags: unknown, pUserTags: unknown): Promise<{ m_eResult: EResult, m_nResultsReturned: number, m_nTotalResultCount: number, m_rgPublishedFileId: unknown, m_rgScore: number, m_nAppId: number, m_unStartIndex: number }>;
export async function SendQueryUGCRequest(handle: number): Promise<{ m_handle: number, m_eResult: EResult, m_unNumResultsReturned: number, m_unTotalMatchingResults: number, m_bCachedData: bool, m_rgchNextCursor: string }>;
export async function RequestUGCDetails(nPublishedFileID: number, unMaxAgeSeconds: number): Promise<{ m_details: SteamUGCDetails_t, m_bCachedData: bool }>;
export async function CreateItem(nConsumerAppId: number, eFileType: EWorkshopFileType): Promise<{ m_eResult: EResult, m_nPublishedFileId: number, m_bUserNeedsToAcceptWorkshopLegalAgreement: bool }>;
export async function SubmitItemUpdate(handle: number, pchChangeNote: string): Promise<{ m_eResult: EResult, m_bUserNeedsToAcceptWorkshopLegalAgreement: bool, m_nPublishedFileId: number }>;
export async function SetUserItemVote(nPublishedFileID: number, bVoteUp: bool): Promise<{ m_nPublishedFileId: number, m_eResult: EResult, m_bVoteUp: bool }>;
export async function GetUserItemVote(nPublishedFileID: number): Promise<{ m_nPublishedFileId: number, m_eResult: EResult, m_bVotedUp: bool, m_bVotedDown: bool, m_bVoteSkipped: bool }>;
export async function AddItemToFavorites(nAppId: number, nPublishedFileID: number): Promise<{ m_nPublishedFileId: number, m_eResult: EResult, m_bWasAddRequest: bool }>;
export async function RemoveItemFromFavorites(nAppId: number, nPublishedFileID: number): Promise<{ m_nPublishedFileId: number, m_eResult: EResult, m_bWasAddRequest: bool }>;
export async function StartPlaytimeTracking(pvecPublishedFileID: unknown, unNumPublishedFileIDs: number): Promise<{ m_eResult: EResult }>;
export async function StopPlaytimeTracking(pvecPublishedFileID: unknown, unNumPublishedFileIDs: number): Promise<{ m_eResult: EResult }>;
export async function StopPlaytimeTrackingForAllItems(): Promise<{ m_eResult: EResult }>;
export async function AddDependency(nParentPublishedFileID: number, nChildPublishedFileID: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number, m_nChildPublishedFileId: number }>;
export async function RemoveDependency(nParentPublishedFileID: number, nChildPublishedFileID: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number, m_nChildPublishedFileId: number }>;
export async function AddAppDependency(nPublishedFileID: number, nAppID: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number, m_nAppID: number }>;
export async function RemoveAppDependency(nPublishedFileID: number, nAppID: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number, m_nAppID: number }>;
export async function GetAppDependencies(nPublishedFileID: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number, m_rgAppIDs: unknown, m_nNumAppDependencies: number, m_nTotalNumAppDependencies: number }>;
export async function DeleteItem(nPublishedFileID: number): Promise<{ m_eResult: EResult, m_nPublishedFileId: number }>;
export async function RequestEncryptedAppTicket(pDataToInclude: unknown, cbDataToInclude: number): Promise<{ m_eResult: EResult }>;
export async function RequestStoreAuthURL(pchRedirectURL: string): Promise<{ m_szURL: string }>;
export async function GetMarketEligibility(): Promise<{ m_bAllowed: bool, m_eNotAllowedReason: EMarketNotAllowedReasonFlags, m_rtAllowedAtTime: number, m_cdaySteamGuardRequiredDays: number, m_cdayNewDeviceCooldown: number }>;
export async function GetDurationControl(): Promise<{ m_eResult: EResult, m_appid: number, m_bApplicable: bool, m_csecsLast5h: number, m_progress: EDurationControlProgress, m_notification: EDurationControlNotification, m_csecsToday: number, m_csecsRemaining: number }>;
export async function RequestUserStats_CUserStatsReceived(steamIDUser: unknown): Promise<{ m_nGameID: number, m_eResult: EResult, m_steamIDUser: unknown }>;
export async function FindOrCreateLeaderboard(pchLeaderboardName: string, eLeaderboardSortMethod: ELeaderboardSortMethod, eLeaderboardDisplayType: ELeaderboardDisplayType): Promise<{ m_hSteamLeaderboard: number, m_bLeaderboardFound: number }>;
export async function FindLeaderboard(pchLeaderboardName: string): Promise<{ m_hSteamLeaderboard: number, m_bLeaderboardFound: number }>;
export async function DownloadLeaderboardEntries(hSteamLeaderboard: number, eLeaderboardDataRequest: ELeaderboardDataRequest, nRangeStart: number, nRangeEnd: number): Promise<{ m_hSteamLeaderboard: number, m_hSteamLeaderboardEntries: number, m_cEntryCount: number }>;
export async function DownloadLeaderboardEntriesForUsers(hSteamLeaderboard: number, prgUsers: unknown, cUsers: number): Promise<{ m_hSteamLeaderboard: number, m_hSteamLeaderboardEntries: number, m_cEntryCount: number }>;
export async function UploadLeaderboardScore(hSteamLeaderboard: number, eLeaderboardUploadScoreMethod: ELeaderboardUploadScoreMethod, nScore: number, pScoreDetails: unknown, cScoreDetailsCount: number): Promise<{ m_bSuccess: number, m_hSteamLeaderboard: number, m_nScore: number, m_bScoreChanged: number, m_nGlobalRankNew: number, m_nGlobalRankPrevious: number }>;
export async function AttachLeaderboardUGC(hSteamLeaderboard: number, hUGC: number): Promise<{ m_eResult: EResult, m_hSteamLeaderboard: number }>;
export async function GetNumberOfCurrentPlayers(): Promise<{ m_bSuccess: number, m_cPlayers: number }>;
export async function RequestGlobalAchievementPercentages(): Promise<{ m_nGameID: number, m_eResult: EResult }>;
export async function RequestGlobalStats(nHistoryDays: number): Promise<{ m_nGameID: number, m_eResult: EResult }>;
export async function CheckFileSignature(szFileName: string): Promise<{ m_eCheckFileSignature: ECheckFileSignature }>;
